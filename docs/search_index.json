[["index.html", "ArabBarometRv2 Graphing Guide Version 2 Introduction Purpose Best Practices General Guide Process Example Data Header Code", " ArabBarometRv2 Graphing Guide Version 2 MaryClare Roche 2025-04-23 Introduction Purpose This guide is meant to give instructions on how to create graphs using the second version of the ArabBarometR package. If you do not yet have ArabBarometRv2 installed, see either the README file on the package’s GitHub repo, or Installing and Updating ArabBarometR in the Appendix. This guide was created using the bookdown package, which comes with many fun and useful features. An overview of these features can be found in the Guide Features section in the general ArabBarometRv2 Guide. As such, this guide assumes a few things: That you have the second version of the ArabBarometR package installed on your machine; ArabBarometRv2. If this is not true, please take a look at the README file on the ArabBarometR GitHub page. You have a basic understanding of how to load data and packages in R. If this is not true, you can pursue either this guide or this website. Best Practices Before we begin, there are a few best practices that you are highly encouraged to adhere to. Load you data directly from the source. Rather than downloading AB data from the Drive and saving it in a folder on your computer, then re-downloading it every time it gets updated, just put in the path from where you are to the latest data on the Drive. This will save you a significant amount of space on your machine. It is also the best way to guarantee that you are: Using the latest data. Using the original, unedited data each time you start/work on a project. Save your code in the same place you save your graphs. Instead of saving your code in one place and your output in another, save everything in the same spot. This way, when you spot an error in your graphs or want to add more, you know exactly where the code used to create the output is. Load only the packages you need. Many packages in R do not necessarily play nicely with each other. Often, packages will have functions with the same name that do different things. If you call one of those function in your code, R will use the function from the last package you loaded. General Guide Process Assuming we are working with clean data, the graphs are created in two steps: Create a summary of the data you want to graph. Graph that summary. For each type of graph, the guide will first go through how to create one graph, then how to create many graphs. Example Data The examples in this guide will be created using data from Wave VI. For single survey graphs, it will use data from from Wave VI, Survey I. For trend graphs, it will use data from Wave VI, Survey I, II, and III, where Survey III is the final survey we conducted in Wave VI. The ArabBarometRv2 package includes a sample of this data, so you will not have to download any extra data sets to follow along. The sample data has an artificial Q13 column. The variable was not collected during Wave VI since this is usually filled out by an enumerator in the survey area and Wave VI was conducted over the phone. For demonstration purposes, a Q13 column was randomly generated and added to the data. Header Code In order to create certain graphs (e.g., demographic graphs, comparative graphs for nominal questions, etc.), the data needs to be prepared correctly. The first chapter in this guide introduces several functions included in the ArabBarometRv2 package that allow the user to easily prepare the data. The code examples in this guide will focus on how to create graphs. That is, the examples will not include loading and preparing the data or loading libraries. As you begin this guide, make sure your header looks something like the following: setwd(&quot;/where/graphs/will/live/&quot;) library(ArabBarometRv2) # Our package library(dplyr) # Lots of handy functions library(purrr) # Mapping functions # Preparing Survey 1 data with no pipes: ## Adding demographic columns: survey1 &lt;- add_demographics(survey1) ## Creating dummies for examples: survey1 &lt;- dummy_all(survey1, Q2061A) # Preparing Survey 2 data with R native pipe: survey2 &lt;- survey2 |&gt; add_demographics() |&gt; dummy_all(Q2061A) # Preparing Survey 3 data with dplyr pipe: survey3 &lt;- survey3 %&gt;% add_demographics() %&gt;% dummy_all(Q2061A) The above code prepares each of our example data sets using the same two functions, but using three different methods. When adding demographic variable columns and creating dummy columns from variable Q2061A for survey1 (Wave VI Part 1), each step is done on the data independently. When doing the same manipulations on survey2 (Wave VI Part 2) and survey3 (Wave VI Part 3), the actions are chained together using pipes. Data preparation for survey2 uses native pipes |&gt;, while data preparation for survey3 uses pipes from the dplyr package. All three operations have the same outcome. Q: Why use one method over the other? A: Personal preference. To learn more about see the section A Note on Piping in the Appendix. Chapter 1 introduces the functions used to prepare the data. "],["package-workflow.html", "Package Workflow and Grammar calculate_ functions plot_ functions AB_save()", " Package Workflow and Grammar The package is designed with Arab Barometer’s data and workflow in mind. The functions in the package were written with the express purpose of working with Arab Barometer data. Arab Barometer data has certain structures and features that ArabBarometR functions expect; especially the functions for creating Arab Barometer branded graphs. It is of course possible for data from other sources to have the features, but that is not guaranteed. I encourage the use of the functions from ArabBarometR with Arab Barometer data, while encouraging caution for use with non Arab Barometer data. In the same vein, there is a natural workflow to creating Arab Barometer brand graphs. You will see this workflow repeated over and over again throughout this guide. The workflow consists of three steps: Create summaries of the data. Plot the summaries. Save the plots. In each chapter, you will see how to follow these steps to create a specific type of plot. Generally speaking, for each type of graph there is one function per step. The functions follow naming conventions associated with each step. They are: calculate_ functions plot_ functions AB_save() The calculate_ and plot_ functions are designed to be chained together for simplicity. That is, you can pipe the output of the calculate_ function into the appropriate plot_ function using either the dplyr package pipe %&gt;% or the native pipe |&gt; found in R 4.0+. Furthermore, the calculate_ and plot_ functions that are used together have the same suffix. For example, calculate_X works with plot_X, while calculate_Y works with plot_Y. calculate_ functions The first two required inputs for any calculate_ function are: ab_data : An Arab Barometer data frame ab_var : A variable name from the Arab Barometer data frame The ab_data parameter is specifically referring to Arab Barometer data. The calculate_ function will look for certain features in the data frame that are specific to Arab Barometer data. All other parameters1 are set to default values. More details on the specifics of the other parameters and their defaults are provided throughout the guide. plot_ functions The only required input for the (paired) plot_ functions is ab_summary. The parameter ab_summary is the data frame output of the paired calculate_ function. That is, the plot_ function expects its input to be the output of its matching calculate_ function. For example, plot_X expects its input to be the output of calculate_X and plot_Y expects its input to be the output of calculate_Y. NOTE: Currently not all plot_ functions have matching calculate_ functions. As the package continues to develop, most (if not all) plot_ functions will be broken up into a matching calculate_ and plot_ function pair. AB_save() The function AB_save() is a simple wrapper function for ggsave() from the ggplot2 package. The function sets default saving dimension in accordance with Arab Barometer branding. The only required input is what you would like to name your graph. As of 2023-01-23; some of this will likely change in the near future.↩︎ "],["arabic.html", " العربيه ", " العربيه This guide is written in English for several reasons. Primarily, MaryClare does not speak Arabic. Secondarily, computers generally and programming languages specifically do not mix well with Arabic. It is best to start learning with the simplest case, and English is the simplest case when it comes to programming. However just because programming with Arabic is difficult, that does not mean it cannot be done. The functions in the package are designed to work with Arabic data just as they do with English data. Using the Arabic Arab Barometer data set should produce the same outcome as the English Arab Barometer data set, only with Arabic adjustments. For example, using data data to create plots will produce plots with Arabic text. If everything works perfectly, the package should be able to detect when Arabic or English is being used an adjust accordingly. If the package makes a mistake, you can force it to a specific language by supplying either \"ar\" or \"en\" to the parameter .language in the function you are using. "],["table-of-contents.html", "Table of Contents", " Table of Contents Cross Tabulation Graphs Overall Graphs Overall Demographics Graphs Comparative Graphs Comparative Demographic Graphs Stacked Graphs Comparative Stacked Graphs Multi-Question Graphs Single Country Multi-Question Plots Comparative Multi-Question Plots Trend Graphs Single Country Trend Graphs Single Country Demographic Trend Graphs Single Country Multi-Question Trend Plots Comparative Trend Graphs Comparative Demographic Trend Graphs All Things Color Color Options Change Default Colors Highlight Countries with Color How Do I…? Change the Font Size Change the Title/Subtitle/Caption Only Show Certain Countries Change the Order for Stacked Graphs Appendix Guide Features Installing and Updating ArabBarometR "],["preparing-data.html", "Chapter 1 Preparing Data 1.1 TL;DR 1.2 recode_country() 1.3 Demographic functions 1.4 Advanced 1.5 age_demographic() 1.6 education_demographic() 1.7 dummy_all() 1.8 dummy_select() 1.9 In Practice", " Chapter 1 Preparing Data Before we create create graphs or look at summaries, we often need to tidy up the data a bit. ArabBarometR provides a suite of functions to ease this process. In particular, it is useful to create a character columns: with the names of countries rather than their numeric codes; for commonly used demographics (gender, age, income, education, and settlement); and dummied versions of various variables. 1.1 TL;DR Just use the add_demographics() function. The function add_demographics() preforms all the functions below: recode_country(), gender_demographic(), age_demographic(), income_demographic(), education_demographic(), and settlement_demographic(). You do not need to use the functions from the following sections if you use add_demographics(). The input for add_demographics() is an Arab Barometer data frame. The output is an Arab Barometer data frame with the additional columns Country, gender, age, income, education, and settlement. 1.1.0.1 Example: survey1 &lt;- add_demographics(survey1) table(survey1$Country) #&gt; #&gt; Algeria Lebanon Morocco #&gt; 998 1000 1002 table(survey1$gender) #&gt; #&gt; Female Male #&gt; 1495 1505 table(survey1$age) #&gt; #&gt; 18-29 30+ #&gt; 1161 1837 table(survey1$income) #&gt; #&gt; Can cover expenses Cannot cover expenses #&gt; 1565 1406 table(survey1$education) #&gt; #&gt; Above Secondary Max Secondary #&gt; 1666 1328 table(survey1$settlement) #&gt; #&gt; Rural Urban #&gt; 1526 1474 1.2 recode_country() The input of the recode_country() function is an Arab Barometer data frame. The function takes the COUNTRY variable from an Arab Barometer data frame and creates a Country variable. The original variable COUNTRY should be a labeled numeric value where the numeric value is the country code for the country in which the interview was conducted, and the label is the name of the country. The output variable Country will be a character vector of country names. This function was originally created by Patrick, and updated by MaryClare. 1.2.1 Example: table(survey1$COUNTRY) #&gt; #&gt; 1 10 13 #&gt; 998 1000 1002 survey1 &lt;- recode_country(survey1) table(survey1$Country) #&gt; #&gt; Algeria Lebanon Morocco #&gt; 998 1000 1002 1.3 Demographic functions 1.3.1 Basics There are five functions that can be used to create the standard demographic breakdowns Arab Barometer produces graphs for: gender_demographic() : Based on Q1002, outputs variable gender age_demographic() : Based on Q10012, outputs variable age income_demographic() : Based on Q1016, outputs variable income education_demographic() : Based on Q1003, outputs variable education settlement_demographic() : Based on Q13, outputs variable settlement Each of the aforementioned functions generates a dichotomous character variable. The input for each function is an Arab Barometer data frame. 1.3.1.1 Example: # Gender survey1 &lt;- gender_demographic(survey1) table(survey1$gender) #&gt; #&gt; Female Male #&gt; 1495 1505 # Age survey1 &lt;- age_demographic(survey1) table(survey1$age) #&gt; #&gt; 18-29 30+ #&gt; 1161 1837 # Income survey1 &lt;- income_demographic(survey1) table(survey1$income) #&gt; #&gt; Can cover expenses Cannot cover expenses #&gt; 1565 1406 # Education survey1 &lt;- education_demographic(survey1) table(survey1$education) #&gt; #&gt; Above Secondary Max Secondary #&gt; 1666 1328 # Settlement survey1 &lt;- settlement_demographic(survey1) table(survey1$settlement) #&gt; #&gt; Rural Urban #&gt; 1526 1474 1.4 Advanced Of the five basic demographic creation functions, the user has the ability to manipulate the output of two of them: age_demographic() and education_demographic(). This is because, unlike the other demographics, age is a continuous variable and education has multiple levels. Therefore, the point at which the variables bifurcate can be changed. 1.5 age_demographic() First let’s look at the age_demographic() function. As seen above, the default output is either \"18-29\" or \"30+\". By setting the parameter .range to N, the user can change the returned values to \"18-(N-1)\" and \"N+\". For example, if the user wanted to compare opinions of those over 60 with the opinions of those under 60, the user could set the parameter .range to 60, so the function age_demographic() returns \"18-59\" and \"60+\". survey1 &lt;- age_demographic(survey1, .range = 60) table(survey1$age) #&gt; #&gt; 18-59 60+ #&gt; 2702 296 1.6 education_demographic() The education_demographic() function creates a dichotomous character column in the data frame titled education. You can enter a cutoff by entering a numeric value between 1 and 7 or a character string from value labels of the column Q1003 for the .edu_lvl parameter. The default for this parameter is \"Secondary\". The new column education has the values \"Max Secondary\" or \"Higher\". If you change the .edu_lvl parameter, the “education” column will have the values \"Max .edu_lvl\" or \"Higher\". If you enter a numeric value, the function will use the value label associated with that number. 1.6.1 Examples: # English: ## Default parameters: survey1 %&gt;% education_demographic() %&gt;% # Creates an &quot;education&quot; column select(education) %&gt;% # Select just the &quot;education&quot; column table() # Create table of the &quot;education&quot; column values #&gt; education #&gt; Above Secondary Max Secondary #&gt; 1666 1328 ## Changing the cutoff with a character string: survey1 %&gt;% education_demographic(&quot;BA&quot;) %&gt;% select(education) %&gt;% table() #&gt; education #&gt; Above BA Max BA #&gt; 324 2670 ## Changing the cutoff with a numeric: survey1 %&gt;% education_demographic(3) %&gt;% select(education) %&gt;% table() #&gt; education #&gt; Above Preparatory/Basic Max Preparatory/Basic #&gt; 2423 571 1.7 dummy_all() The dummy_all() function takes one or more factor variables and creates a dummy column for each factor level. The new columns are given the original variable name then appended with an underscore and the factor level being dummied. In the example below, you can see when dummy_all() is used on the variable b from the data frame df, two new columns are created: b_1 and b_2. By default, dummy_all() does not create a dummy column for NA’s. The can be changed, however, by specifying no_NA = FALSE. The function dummy_all() takes as input the data frame variables are being selected from and the variable you want to create dummy columns for. More details can be found by typing help(\"dummy_all\") into the R Console. 1.7.1 Examples: # Sample Data: a &lt;- c(1,3,2,4,2,3,4,2,2) b &lt;- c(1,2,1,1,2,1,2,2,2) c &lt;- c(2,5,1,1,5,NA,2,NA,5) df &lt;- data.frame(a,b,c) # Original data frame: names(df) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; # Creating dummy columns for one variable: df_1 &lt;- dummy_all(df, # Data frame b # Variable to dummy ) names(df_1) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;b_1&quot; &quot;b_2&quot; # Creating dummy columns for multiple variables: df_2 &lt;- df %&gt;% # Data frame dummy_all(a, # Variable 1 to dummy b # Variable 2 to dummy ) names(df_2) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;a_1&quot; &quot;a_2&quot; &quot;a_3&quot; &quot;a_4&quot; &quot;b_1&quot; &quot;b_2&quot; # Creating NA dummy column: df_3 &lt;- df %&gt;% # Data frame dummy_all(c, # Variable to dummy no_NA = FALSE # Include dummy for NA occurrences ) 1.8 dummy_select() For some variables, we want to create dummy columns for all factor levels, but for other we only want to dummy out a specific level. The dummy_select() variable allows the user to select the factor level to create a dummy column for. The function creates a new variable named in the same style as dummy_all(); the variable name, underscore, the factor level. The dummy_select() column also allows the user to replace the current column with the new dummy column by including the option inplace = TRUE. You can use the function for more than one variable at a time, but not more than one factor level at a time. For example, if two columns both have 1 as a factor level and you want to create a dummy for when the factor is 1, you can include both columns in dummy_select(). However, you cannot create a dummy for when the factor(s) are 1 and 2 in the same command. You would have to run the command once for level 1 and once for level 2. The following example uses the same sample data as before. More details can be found by typing help(\"dummy_select\") into your R Console. 1.8.1 Examples: # Sample Data: a &lt;- c(1,3,2,4,2,3,4,2,2) b &lt;- c(1,2,1,1,2,1,2,2,2) c &lt;- c(2,5,1,1,5,NA,2,NA,5) df &lt;- data.frame(a,b,c) names(df) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; # Adding new column: df_1 &lt;- dummy_select(df, # Data frame b, # Variable to dummy dummy_lvl = 1 # Level to dummy ) names(df_1) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;b_1&quot; # Adding multiple new column: df_2 &lt;- df %&gt;% # Data frame dummy_select(b, # Variable 1 to dummy c, # Variable 2 to dummy dummy_lvl = 1 # Level to dummy ) names(df_2) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;b_1&quot; &quot;c_1&quot; # Replacing column: df_3 &lt;- dummy_select(df, # Data frame a, # Variable to dummy dummy_lvl = 4, # Level to dummy inplace = TRUE # Replace old variable ) table(df$a) #&gt; #&gt; 1 2 3 4 #&gt; 1 4 2 2 table(df_3$a) #&gt; #&gt; 0 1 #&gt; 7 2 1.9 In Practice The functions presented so far can be used in combination to recreate the standard cleaning we use to prep the Arab Barometer data frames for graph creation. Remember: You can copy and paste this code exactly. 1.9.1 Example: # English: survey1 = survey1 |&gt; # Adding Demographic Categories: add_demographics() |&gt; # Creating dummy variables for all levels of Q2061A: dummy_all(Q2061A) An update to the function age_demographic() has been requested and is on the docket. The update requests that the function takes account ages missing from Q1001 if they are supplied by Q1001YEAR or Q1001APPROX.↩︎ "],["chapter-1.html", "Chapter 2 Single Country Overall Graphs 2.1 Create a Single Graph 2.2 Create Many Graphs", " Chapter 2 Single Country Overall Graphs This chapter will cover how to make an overall frequency graph for a single country. 2.1 Create a Single Graph TL;DR This section will go over how to make a one-off frequency graph for a single country. At the end, your code will look like the following: survey1 %&gt;% calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_ind_smry(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: Let’s go! 2.1.1 Create a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the create_smry_individual() function. The three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_ind_smry in your R console. In this example, the variable we want to plot is Q1COVID19 and the country we want to plot it for is Algeria. calculate_ind_smry( ab_data = survey1, # The data you are using ab_var = &quot;Q1COVID19&quot;, # The variable you want to plot select_country = &quot;Algeria&quot; # The country you want to plot it for ) The above is the same as: calculate_ind_smry(survey1,&quot;Q1COVID19&quot;,&quot;Algeria&quot;) Which is the same as: survey1 %&gt;% calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) The last example uses a pipe, %&gt;%, which comes from the package dplyr. To learn more about piping and using %&gt;% in programming, see A Note on Piping in the Appendix. The output of any of the above expressions is the same: #&gt; # A tibble: 5 × 2 #&gt; Q1COVID19 Percent #&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 1 [Very concerned] 23 #&gt; 2 2 [Somewhat concerned] 37 #&gt; 3 3 [Somewhat not concerned] 7 #&gt; 4 4 [Not at all concerned] 17 #&gt; 5 666 [Don&#39;t know/Refuse] 0 This data frame is what we are ultimately graphing. There are few things to note about the summary data frame we just created. First, there are two columns. The first column is named for the question we are graphing. The second column is named Percent. If you want to use the plotting functions in ArabBarometR to graph a summary data frame that is not created by a calculate function, the data frame must be structured as two columns with the second column named Percent. Second, you can see that the first column is labeled. The labels come from the responses in the data. If the responses in the data are not labeled, this column will not be labeled. In the next step, plotting, the y-axis labels are taken from these labels. So, if the column is not labeled, the y-axis will just be the values of the column. Let’s store the summary as an object and move on. Q1COVID19_summary &lt;- survey1 %&gt;% calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) 2.1.2 Plot the Summary The next step is plot the summary we just created. To do this, we use the function plot_ind_smry(). There is only one necessary parameter to use plot_ind_smry(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_ind_smry in your R console. Now, we can plug our summary into the plot function: plot_ind_smry( ab_summary = Q1COVID19_summary # The summary data frame ) The above code is the same as: Q1COVID19_summary %&gt;% plot_ind_smry() Which is the SAME as: survey1 %&gt;% calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_ind_smry() We can do this because Q1COVID19_summary is equal to survey1 %&gt;% calculate_ind_smry(\"Q1COVID19\", \"Algeria\"). Any of the above code gives the following graph: Almost done! Notice how the caption says Arab Barometer Wave N (DATE)? Let’s change that. survey1 %&gt;% calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_ind_smry( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; # NEW caption ) Now we have the plot we started with! We’re done! 2.2 Create Many Graphs As a rule of thumb in programming, if you can create something one time, you can create it a bajillion times. This is good because for each wave, Arab Barometer needs approximately a bajillion graphs. TL;DR To create many graphs at once, there are three steps to follow. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... summaries &lt;- calculate_ind_smry( survey1, variables_2_plot, &quot;Algeria&quot; ) #.......................Plot the summaries....................... plots &lt;- map(summaries, plot_ind_smry, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. Let’s begin. 2.2.1 Identify the Variables When creating many graphs, you need to tell R which variables you want to make plots of. This is true for when you want to create a single graph as well, but it is much more strongly implied. Plus, the variables must be identified in a specific way. To create many summaries at once, you need to provide your variables in a named list. To create a named list, first make a list of the variables you want to plot. variables_2_plot &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) The next step is to name your list. names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) Now, you have a named list of variables. Time to summarize them. 2.2.2 Create Summaries A nice thing about calculate_ind_smry() is that the user can create many summaries just as easily as creating a single summary. Recall it takes three parameters: (1) the data you are using, (2) the variable you want to plot, and (3) the country you are creating the plot for. Now, instead of just one variable we want to plot, we can feed it our list of variables. summaries &lt;- calculate_ind_smry( survey1, # Data we are using variables_2_plot, # List of variables to plot &quot;Algeria&quot; # Country we want to focus on ) The code above produces a named list. Each element in the list is a summary of a variable. The variable is the name of the list. In long form, it looks like the following: Let’s save this outcome as an object and move on to plotting. summaries &lt;- calculate_ind_smry( survey1, variables_2_plot, &quot;Algeria&quot; ) 2.2.3 Plot the Summaries When you want to do something many times, the purrr package comes in extremely handy. That is why it is one of the two (non-ArabBarometR) packages loaded in the Header Code in the Introduction of this guide. In particular, the map() function from the purrr package allows the user to feed a vector or list into a function and returns a list of the output. More information can be found in the Appendix section called Using a map(). In the previous section we created a list of variables. Now, with the help of the map() function, we feed them to plot_ind_smry(). The code follows: map( summaries, # List (our summaries) plot_ind_smry # Function (plotting function) ) The code produces the following output: map( summaries, # List of summaries plot_ind_smry # Plotting function ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A #&gt; #&gt; $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map() function, holding it constant just as we did with the data and country when creating the list of summaries. map( summaries, # List (our summaries) plot_ind_smry, # Function (plotting function) .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Constant argument (caption) ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A #&gt; #&gt; $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. plots &lt;- map( summaries, plot_ind_smry, .caption = &quot;Arab Barometer Wave VI, Survey I&quot; ) Now, all three plots have been stored in a named list named plots. To look at the first plot: plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: plots$Q2061A Finally, to see the plot for variable Q609, run the following code: plots$Q609 You have now completed all steps in the example code. Congrats! "],["chapter-2.html", "Chapter 3 Single Country Demographic Plots 3.1 Create a Single Graph 3.2 Create Many Graphs 3.3 Extras", " Chapter 3 Single Country Demographic Plots This chapter will cover how to make a frequency graph by a demographic for a single country. This code assumes you have already added the demographic variables to your code. See the section Header Code in the introduction. 3.1 Create a Single Graph This section will go over how to make a one-off frequency graph by a demographic for a single country. You will get a warning when you use the plot_ind_smry_dem() function. Do not be afraid. The warning is a result of the function forcing the order of the bars. You can safely ignore it. It is displayed in the example code at the top of this tutorial to demonstrate everything is ok, but suppressed for the rest of the chapter. TL;DR At the end, your code will look like the following: survey1 %&gt;% calculate_ind_smry_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, &quot;Algeria&quot;) %&gt;% plot_ind_smry_dem(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) That code will produce the following graph: #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. Notice these messages and warnings? That’s ok! You can ignore them. In the rest of this chapter, the messages and warning will be silenced. They are shown here to make sure the reader knows nothing is wrong if you see them. 3.1.1 Creating a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the calculate_ind_smry_dem() function. Just like calculate_smry_individual(), the four main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, (3) the demographic you want to divide the variable by, and (4) the country you want to plot it for. To see all the input parameters for the function, type the code ?calculate_ind_smry_dem in your R console. In this example, the variable we want to plot is Q1COVID19, the demographic we want to compare is gender, and the country we want to plot it for is Algeria3. survey1 %&gt;% # Data calculate_ind_smry_dem(&quot;Q1COVID19&quot;, # Variable to summarize demographic = &quot;gender&quot;, # Demographic select_country = &quot;Algeria&quot;) # Country The above code will produce the following output: #&gt; # A tibble: 9 × 3 #&gt; # Groups: gender [2] #&gt; gender Q1COVID19 Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Female 1 [Very concerned] 28 #&gt; 2 Female 2 [Somewhat concerned] 38 #&gt; 3 Female 3 [Somewhat not concerned] 7 #&gt; 4 Female 4 [Not at all concerned] 13 #&gt; 5 Male 1 [Very concerned] 19 #&gt; 6 Male 2 [Somewhat concerned] 36 #&gt; 7 Male 3 [Somewhat not concerned] 7 #&gt; 8 Male 4 [Not at all concerned] 20 #&gt; 9 Male 666 [Don&#39;t know/Refuse] 0 The function calcuate_demographic_smry() creates a named list. In this list, each item is a summary broken down by a demographic and the name of each item is that demographic. Let’s save our gender demographic summary and move on to plotting it. Q1COVID19_gender &lt;- survey1 %&gt;% calculate_ind_smry_dem(&quot;Q1COVID19&quot;, demographic = &quot;gender&quot;, select_country = &quot;Algeria&quot;) 3.1.2 Plotting the Summary The next step is plot the summary we just created. To do this, we use the function plot_ind_smry_dem(). There is only one necessary parameter to use plot_smry_individual(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_ind_smry_dem in your R console. Now, we can plug our summary into the plot function: plot_ind_smry_dem(Q1COVID19_gender) The above code is the same as: Q1COVID19_gender %&gt;% plot_ind_smry_dem() Both stylings of code produce the following graph: Yet again, we see the caption needs to be changed. We can change it the same way we did in Chapter 1. Q1COVID19_gender %&gt;% plot_ind_smry_dem( .caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot; ) Now we have the graph: Since Q1COVID19_gender is the same as survey1 %&gt;% calculate_ind_smry_dem(\"Q1COVID19\",\"gender\",\"Algeria\"), we can substitute the former with the latter to get the original code in our example. This will give us the same plot that we just created. survey1 %&gt;% calculate_ind_smry_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, &quot;Algeria&quot;) %&gt;% plot_ind_smry_dem(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;) 3.2 Create Many Graphs TL;DR We will follow the same steps from Chapter one to create many graphs at once. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A&quot;, &quot;Q609&quot;) #......................Create the summaries...................... gender_summaries &lt;- survey1 gender_summaries &lt;- survey1 %&gt;% calculate_ind_smry_dem(variables_2_plot, &quot;gender&quot;, &quot;Algeria&quot;) #.......................Plot the summaries....................... gender_plots &lt;- map(gender_summaries, plot_ind_smry_dem, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: gender_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. The steps to creating a named variable list are exactly the same as the ones we reviewed in Chapter 1; therefore, we will begin by creating summaries. For a refresher on creating named lists, click here. We will use the same variables as in Chapter 1: Q1COVID19, Q2061A, and Q609. Let’s begin. 3.2.1 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_ind_smry_dem(). Recall it takes four parameters: (1) the data you are using, (2) the variable(s) you want to plot, (3) the demographic you want the data summarized by and (4) the country you are creating the plot for. Now, instead of one variable, you supply the list of variables. survey1 %&gt;% # Data calculate_ind_smry_dem(variables_2_plot, # Variables to summarize &quot;gender&quot;, # Demographic &quot;Algeria&quot;) # Country The above code produces a nested named list. Each element in the list is another named list. Each element in the outer list is named for a variable you want to create summaries for. The inner list of each element is a summary with the data grouped by age, gender, income, and education. You can think of it like the following bullet point list: calculate_ind_smry_dem output Q1COVID19 gender Q1COVID19 summary grouped by gender Q2061A gender Q2061A summary grouped by gender Q609 gender Q609 summary grouped by gender Let’s save this outcome as an object and move on to plotting. gender_summaries &lt;- survey1 %&gt;% calculate_ind_smry_dem(variables_2_plot, &quot;gender&quot;, &quot;Algeria&quot;) 3.2.2 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_ind_smry_dem(). Just like in Chapter 1, we need to use the map function. In this case, you supply the list of summaries you just created, and the plot_demographic_sumry_individual() function. The code follows: map( gender_summaries, # List of summaries plot_ind_smry_dem # Plotting function ) The code produces the following output: map( gender_summaries, # List of summaries plot_ind_smry_dem # Plotting function ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A #&gt; #&gt; $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( gender_summaries, # List of summaries plot_ind_smry_dem, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A #&gt; #&gt; $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. gender_plots &lt;- map( gender_summaries, # List of summaries plot_ind_smry_dem, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named gender_plots. To look at the first plot: gender_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: gender_plots$Q2061A Finally, to see the plot for variable Q609, run the following code: gender_plots$Q609 You have now completed all steps in the example code. Congrats! 3.3 Extras 3.3.1 Font Size The font size default brand size is used for the graph text. You can learn how to change that in the chapter on changing the font size. 3.3.2 Colors You can learn how to change the colors for the comparative trend graph in the chapter on changing graph colors. 3.3.3 Warnings There are several points in this code when warnings or messages will appear even if you are using the code correctly. No need to panic. You can read about all of the messages and warnings that may appear even when the code is correct in the section How do I Understand (some) Messages, Warnings, and Errors. The function calculate_ind_smry_dem() will produce a join message. You can read a bit about that here. The function plot_ind_smry_dem() will produce a position_dodge() warning. You can read a bit about that here. If the style of this code is confusing, see Create a Summary in Chapter 1↩︎ "],["chapter-3.html", "Chapter 4 Comparative Overall Graphs 4.1 Create a Single Graph 4.2 Create Many Graphs", " Chapter 4 Comparative Overall Graphs This chapter will cover how to make a comparative frequency graph for multiple countries. 4.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph for a multiple countries. TL;DR At the end, your code will look like the following: survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) %&gt;% plot_comp_smry(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) That code will produce the following graph: 4.1.1 Create a Summary The process of creating an overall comparative graph is intentionally similar to creating a overall individual graph. As always, the first step is to organize the data we want to graph. For this we use the function calculate_comp_smry(), which is the comparative version of the individual summary function. The function requires only two parameters: (1) the data you are using, and (2) the variable you want to summarize. There are several other optional parameters. To see all the input parameters for the function, type the code ?calculate_comp_smry in your R console. For the example in this section, we are using the data set survey1 and summarizing the variable Q1COVID19. calculate_comp_smry( ab_data = survey1, # The data you are using ab_var = &quot;Q1COVID19&quot; # The variable you want to plot ) Recall the above code is the same as typing: survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) Let’s take a look at the output: #&gt; # A tibble: 3 × 2 #&gt; Country Q1COVID19 #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Algeria 72 #&gt; 2 Lebanon 82 #&gt; 3 Morocco 65 A few things to notice about the output of this function: The first column is called Country. This will always be the case. The plot function used for comparative summaries will expect this. The second column is named after the question being summarized. This will always be the case. The plot function used for comparative summaries will expect this. The title of the graph will depend on the name of this column. If you wish to provide the plot function your own summary, it will have to follow these conventions. Now we’ll store the summary as an object comparative_summary and move on to plotting it. comparative_summary &lt;- survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) 4.1.2 Plot the Summary The next step is plot the summary we just created. To do this, we use the function plot_comp_smry(). There is only one necessary parameter to use plot_comp_smry(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_comp_smry in your R console. Now, we can plug our summary into the plot function: plot_comp_smry( ab_summary = comparative_summary # The summary data frame ) The above code is the same as: comparative_summary %&gt;% plot_comp_smry() Which is the SAME as: survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) %&gt;% plot_comp_smry() We can do this because comparative_summary is equal to survey1 %&gt;% calculate_comp_smry(\"Q1COVID19\"). Any of the above code gives the following graph: Almost done! Notice how the caption says Arab Barometer Wave N (DATE)? Let’s change that. survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) %&gt;% plot_comp_smry( .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # NEW caption ) Now we have the plot we started with! We’re done! 4.2 Create Many Graphs As a rule of thumb in programming, if you can create something one time, you can create it a bajillion times. This is good because for each wave, Arab Barometer needs approximately a bajillion graphs. TL;DR To create many graphs at once, there are three steps to follow. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) #......................Create the summaries...................... summaries &lt;- survey1 %&gt;% calculate_comp_smry(variables_2_plot) #.......................Plot the summaries....................... plots &lt;- map(summaries, plot_comp_smry, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: comparative_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: comparative_plots$Q2061A_1 Finally, to see the plot for variable Q609, run the following code: comparative_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. Let’s begin. 4.2.1 Identify the Variables When creating many graphs, you need to tell R which variables you want to make plots of. This is true for when you want to create a single graph as well, but it is much more strongly implied. Plus, the variables must be identified in a specific way. To create many summaries at once, you need to provide your variables in a named list. To create a named list, first make a list of the variables you want to plot. variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) The next step is to name your list. names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) Now, you have a named list of variables. Time to summarize them. 4.2.2 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_comp_smry(). Recall it takes three parameters: (1) the data you are using, and (2) the variable(s) you want to plot. Now, instead of one variable, you supply the list of variables. calculate_comp_smry( ab_data = survey1, # The data you are using ab_var = variables_2_plot # The variables you want to plot ) The above is the same as: calculate_comp_smry(survey1,variables_2_plot) Which is the same as: survey1 %&gt;% calculate_comp_smry(variables_2_plot) All of the above code in this section produces the same result: a named list. Each element in the list is a summary of a variable. The variable is the name of the list. In long form, it looks like the following: #&gt; $Q1COVID19 #&gt; # A tibble: 3 × 2 #&gt; Country Q1COVID19 #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Algeria 72 #&gt; 2 Lebanon 82 #&gt; 3 Morocco 65 #&gt; #&gt; $Q2061A_1 #&gt; # A tibble: 3 × 2 #&gt; Country Q2061A_1 #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Algeria 28 #&gt; 2 Lebanon 64 #&gt; 3 Morocco 37 #&gt; #&gt; $Q609 #&gt; # A tibble: 3 × 2 #&gt; Country Q609 #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Algeria 48 #&gt; 2 Lebanon 30 #&gt; 3 Morocco 62 Let’s save this outcome as an object and move on to plotting. We will save the list of comparative summaries as an object called comparative_summaries. comparative_summaries &lt;- survey1 %&gt;% calculate_comp_smry(variables_2_plot) 4.2.3 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_comp_smry(). Unlike last time, a helper function is needed to create multiple plots. The helper function is called map(). The map function takes two inputs: (1) a list of things to pass to a function, and (2) a function. Essentially, map() takes each item in the list, and passes it to the function very efficiently. In this case, you supply the list of summaries you just created, and the plot_sumry_comp() function. The code follows: map( comparative_summaries, # List of summaries plot_comp_smry # Plotting function ) The code produces the following output: map( comparative_summaries, # List of summaries plot_comp_smry # Plotting function ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A_1 #&gt; #&gt; $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( comparative_summaries, # List of summaries plot_comp_smry, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A_1 #&gt; #&gt; $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. comparative_plots &lt;- map( comparative_summaries, # List of summaries plot_comp_smry, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named comparative_summaries. To look at the first plot: comparative_plots$Q1COVID19 To see the plot for variable Q2061A, run the following code: comparative_plots$Q2061A_1 Finally, to see the plot for variable Q609, run the following code: comparative_plots$Q609 You have now completed all steps in the example code. Congrats! "],["chapter-4.html", "Chapter 5 Comparative Demographic Graphs 5.1 Create a Single Graph 5.2 Create Many Graphs", " Chapter 5 Comparative Demographic Graphs This chapter will cover how to make a comparative frequency graph by demographic for multiple countries. 5.1 Create a Single Graph This section will go over how to make a one-off comparative frequency graph by demographic for a multiple countries. You will get a warning when you use the plot_comp_smry_dem() function. Do not be afraid. The warning is a result of the function forcing the order of the bars. You can safely ignore it. It is displayed in the example code at the top of this tutorial to demonstrate everything is ok, but suppressed for the rest of the chapter. TL;DR At the end, your code will look like the following: survey1 %&gt;% calculate_comp_smry_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;) %&gt;% plot_comp_smry_dem(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) That code will produce the following graph: #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. Let’s make it. 5.1.1 Creating a Summary The first step in creating a plot is to gather the data you want to display and organize it. You do this with the calculate_comp_smry_dem() function. Just like calculate_smry_comp(), the three main parameters you need to provide to this function are (1) the data you are using, (2) the variable you want to plot, and (3) the demographic you want to organize the variable by. To see all the input parameters for the function, type the code ?calculate_comp_smry_dem in your R console. In this example, the variable we want to plot is Q1COVID19 and the demographic is \"gender\"4. survey1 %&gt;% # Data calculate_comp_smry_dem(&quot;Q1COVID19&quot;, # Variable to summarize &quot;gender&quot; # Demographic ) The above code will produce the following output: #&gt; # A tibble: 6 × 3 #&gt; # Groups: Country [3] #&gt; Country gender Q1COVID19 #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Algeria Female 77 #&gt; 2 Algeria Male 66 #&gt; 3 Lebanon Female 87 #&gt; 4 Lebanon Male 77 #&gt; 5 Morocco Female 75 #&gt; 6 Morocco Male 56 Let’s save our gender demographic summary and move on to plotting it. comparative_Q1COVID19_gender &lt;- survey1 %&gt;% calculate_comp_smry_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;) 5.1.2 Plotting the Summary The next step is plot the summary we just created. To do this, we use the function plot_comp_smry_dem(). There is only one necessary parameter to use plot_smry_comp(): the summary data frame. For a complete list of acceptable parameters and documentation, you can run ?plot_comp_smry_dem in your R console. Now, we can plug our summary into the plot function: plot_comp_smry_dem(comparative_Q1COVID19_gender) The above code is the same as: comparative_Q1COVID19_gender %&gt;% plot_comp_smry_dem() Both stylings of code produce the following graph: Yet again, we see the caption needs to be changed. We can change it the same way we did in Chapter 1. comparative_Q1COVID19_gender %&gt;% plot_comp_smry_dem( .caption = &quot;Arab Barometer Wave VI, Survey I&quot; ) Now we have the graph: Since comparative_Q1COVID19_gender is the same as survey1 %&gt;% calculate_comp_smry_dem(\"Q1COVID19\", \"gender\"), we can substitute the former with the latter to get the original code in our example. This will give us the same plot that we just created. survey1 %&gt;% calculate_comp_smry_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;) %&gt;% plot_comp_smry_dem(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) Tada! You have created the example graph. 5.2 Create Many Graphs TL;DR We will follow the same steps from Chapter Three (and Two, and One…) to create many graphs at once. First, identify the variables to plot. Second, create summaries of those variables. Third, plot those summaries. At the end of this section, your code will look like the following: #.....................Identify the variables..................... variables_2_plot &lt;- list(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) names(variables_2_plot) &lt;- c(&quot;Q1COVID19&quot;, &quot;Q2061A_1&quot;, &quot;Q609&quot;) #......................Create the summaries...................... comparative_gender_summaries &lt;- survey1 %&gt;% calculate_comp_smry_dem(variables_2_plot, &quot;gender&quot;) #.......................Plot the summaries....................... comparative_gender_plots &lt;- map(comparative_gender_summaries, plot_comp_smry_dem, .caption = &quot;Arab Barometer Wave VI, Survey I&quot;) The result is a named list of plots. Each element in the list is a plot. The element is named for the variable it is a plot of. For example, to see the plot for variable Q1COVID19, run the following code: comparative_gender_plots$Q1COVID19 To see the plot for variable Q2061A_1, run the following code: comparative_gender_plots$Q2061A_1 Finally, to see the plot for variable Q609, run the following code: comparative_gender_plots$Q609 That’s it! The only limit on the number of graphs you can create at once is the time it will take R to make them. The more graphs you try to create at once, the longer it will take. The steps to creating a named variable list are exactly the same as the ones we reviewed in Chapter 1; therefore, we will begin by creating summaries. For a refresher on creating named lists, click here. We will use the same variables as in Chapter 3: Q1COVID19, Q2061A_1, and Q609. Let’s begin. 5.2.1 Create Summaries The same function used to create a single summary is used to create many summaries: calculate_comp_smry_dem(). Recall it takes three parameters: (1) the data you are using, (2) the variable(s) you want to plot, and (3) the demographic you are creating the plot for. Now, instead of one variable, you supply the list of variables. survey1 %&gt;% # Data calculate_comp_smry_dem(variables_2_plot, # Variables to summarize &quot;gender&quot; # Demographic ) The above code produces a named list. Each element in the list is a data frame. You can think of it like the following bullet point list: calculate_comp_smry_dem() output Q1COVID19 Q1COVID19 summary grouped by gender Q2061A_1 Q2061A_1 summary grouped by gender Q609 Q609 summary grouped by gender Let’s save this outcome as an object and move on to plotting. comparative_gender_summaries &lt;- survey1 %&gt;% calculate_comp_smry_dem(variables_2_plot, &quot;gender&quot;) 5.2.2 Plot the Summaries Again, the same function to create one plot is used to create many plots: plot_comp_smry_dem(). Just like in Chapter 3, we need to use the map() function from the purrr package. For a refresher, see the Appendix chapter Using a map(). In this case, you supply the list of summaries you just created, and the plot_demographic_sumry_comp() function. The code follows: map( comparative_gender_summaries, # List of summaries plot_comp_smry_dem # Plotting function ) The code produces the following output: map( comparative_gender_summaries, # List of summaries plot_comp_smry_dem # Plotting function ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A_1 #&gt; #&gt; $Q609 Notice, yet again, the caption needs to be changed. To change the caption for all the graphs, just add one line to the map function. map( comparative_gender_summaries, # List of summaries plot_comp_smry_dem, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) #&gt; $Q1COVID19 #&gt; #&gt; $Q2061A_1 #&gt; #&gt; $Q609 Congratulations! You have created three plots at once. You can store them in as a single list and call them one at a time. comparative_gender_plots &lt;- map( comparative_gender_summaries, # List of summaries plot_comp_smry_dem, # Plotting function .caption = &quot;Arab Barometer Wave VI, Survey I&quot; # Caption ) Now, all three plots have been stored in a named list named comparative_gender_plots. To look at the first plot: comparative_gender_plots$Q1COVID19 #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. To see the plot for variable Q2061A_1, run the following code: comparative_gender_plots$Q2061A_1 Finally, to see the plot for variable Q609, run the following code: comparative_gender_plots$Q609 You have now completed all steps in the example code. Congrats! If the style of this code is confusing, see Create a Summary in Chapter 1↩︎ "],["stacked-plots.html", "Chapter 6 Stacked Plots 6.1 Create a Single Graph 6.2 Create Many Graphs 6.3 Extras", " Chapter 6 Stacked Plots Stacked bar graphs are very useful for displaying responses to nominal questions across countries. Unlike the graphs from Chapter 4, which can only compare one nominal category at a time across countries, a stacked bar graph allows the user to show the breakdown of responses to every category for each country. At the end, your code will look like the following: calculate_comp_smry_stacked(survey1, &quot;Q2061A&quot;) |&gt; plot_comp_smry_stacked(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) That code will produce the following graph: Let’s go! 6.1 Create a Single Graph 6.1.1 Create a Summary As usual, the first step to creating a stacked bar graph is to summarize the data you want to display. To do this you use the calculate_comp_smry_stacked() function. This function requires two arguments: (1) an Arab Barometer data frame, and (2) the name of the variable you want to graph. For this example, we’ll use the first survey of wave six and question Q2061A. calculate_comp_smry_stacked( ab_data = survey1, # Data Frame ab_var = &quot;Q2061A&quot; # Variable Name ) #&gt; # A tibble: 24 × 3 #&gt; # Groups: Country [3] #&gt; Country Q2061A Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 1 [Economic situation] 24 #&gt; 2 Algeria 2 [Corruption] 6 #&gt; 3 Algeria 6 [Instability] 3 #&gt; 4 Algeria 7 [Foreign interference] 1 #&gt; 5 Algeria 12 [Public services] 1 #&gt; 6 Algeria 15 [COVID-19] 44 #&gt; 7 Algeria 16 [Other] 3 #&gt; 8 Algeria 666 [Don&#39;t know/Refuse] 2 #&gt; 9 Lebanon 1 [Economic situation] 63 #&gt; 10 Lebanon 2 [Corruption] 17 #&gt; # ℹ 14 more rows The data frame is quite long, as it contains the response of every category for every country. Let’s save it to an object we can graph in the next section. stacked_data_frame &lt;- calculate_comp_smry_stacked( ab_data = survey1, ab_var = &quot;Q2061A&quot; ) 6.1.2 Plot the Summary Now that we have the data frame, the next step is to plot it. For this step we use the function plot_comp_smry_stacked(). The only required input is a data frame. plot_comp_smry_stacked(stacked_data_frame) Similar to many other plots in this guide, the caption is not automatically correct. Even though the data frame is the only required input, it is highly advised about correct the caption. Like always, this is done using the .caption parameter. plot_comp_smry_stacked(stacked_data_frame, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) We can use the pipe operator5 to chain everything together. calculate_comp_smry_stacked(survey1, &quot;Q2061A&quot;) |&gt; plot_comp_smry_stacked(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) This code produces the graph we started with! 6.2 Create Many Graphs Normally, stacked graphs tend to be one-offs, but on the off chance you need to make many of them, you can, with the help of the purrr package. The steps follow. Create an iterable object (read: list or vector) of variable you want to graph. Map your object onto the calculate_comp_smry_stacked() function to create a list of summaries. Map your list of summaries onto the plot_comp_smry_stacked() function to create a list of plots. To be clear, there are many, many different ways to create code to accomplish the goal of creating many graphs at one time. The method suggested here is only one. 6.2.1 Identify the Variables The first step to create many graphs is to identify all the variables you want to make graphs for. For this example, we’ll use Q2061A, Q118_1, and Q516A. We will save it to an object we can map to plot_comp_smry_stacked(). variables_2_plot &lt;- c(&quot;Q2061A&quot;, &quot;Q118_1&quot;, &quot;Q516A&quot;) We have save a vector of our three variables to an object called variables_2_plot. Next step is creating the summaries. 6.2.2 Create Many Summaries The next step is to use the map() function from the purrr package to create a list of summaries. The map() function requires two arguments: (1) an iterable object (e.g., a list or vector), and (2) a function. In the case, our iterable object is variables_2_plot and our function is calculate_comp_smry_stacked(). summary_list &lt;- map( variables_2_plot, # List of variables calculate_comp_smry_stacked # Function to map onto ) #&gt; Error in `map()`: #&gt; ℹ In index: 1. #&gt; Caused by error in `ArabBarometRv2::recode_country()`: #&gt; ! `.ab` must be an Arab Barometer data frame with a labelled column called &#39;country&#39; or &#39;COUNTRY&#39;. Oops. What went wrong? Take a moment to guess. Did you guess that calculate_comp_smry_stacked() takes two arguments and only one is provided here? If so, you are correct! The above code does not provide the data calculate_comp_smry_stacked() needs to create the data frame; specially survey1. The data used to create these summaries is the same every time. That means even though we are changing the variables we want to create summaries for, we can hold the input data constant. You can do this in the map() function by including the name of the parameter you want to hold constant, and setting it equal to your constant input. The map() function knows to use that input for every variable. summary_list &lt;- map( variables_2_plot, # List of variables calculate_comp_smry_stacked, # Function to map onto ab_data = survey1 # Constant parameter ) Unlike the list produced produced when we created many summaries for single country overall plots, this list of summaries is not named. The list has three elements (one for each variable) called \"1\", \"2\", and \"3\". While not strictly necessary, it is useful to provide names for referencing later. Luckily, if you saved the names of the variables as a vector, you can set that vector as the names of the elements in the summary list6. names(summary_list) &lt;- variables_2_plot Now, you can look at each variable’s summary by referencing the variable name. summary_list$Q2061A #&gt; # A tibble: 24 × 3 #&gt; # Groups: Country [3] #&gt; Country Q2061A Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 1 [Economic situation] 24 #&gt; 2 Algeria 2 [Corruption] 6 #&gt; 3 Algeria 6 [Instability] 3 #&gt; 4 Algeria 7 [Foreign interference] 1 #&gt; 5 Algeria 12 [Public services] 1 #&gt; 6 Algeria 15 [COVID-19] 44 #&gt; 7 Algeria 16 [Other] 3 #&gt; 8 Algeria 666 [Don&#39;t know/Refuse] 2 #&gt; 9 Lebanon 1 [Economic situation] 63 #&gt; 10 Lebanon 2 [Corruption] 17 #&gt; # ℹ 14 more rows summary_list$Q118_1 #&gt; # A tibble: 20 × 3 #&gt; # Groups: Country [3] #&gt; Country Q118_1 Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 1 [Create more job opportunities] 34 #&gt; 2 Algeria 2 [Raise wages for existing jobs] 12 #&gt; 3 Algeria 3 [Lower the cost of living (limiting inflation)] 12 #&gt; 4 Algeria 4 [Reform the education system] 13 #&gt; 5 Algeria 5 [Encouraging foreign investment] 9 #&gt; 6 Algeria 6 [Other] 4 #&gt; 7 Algeria 666 [Don&#39;t know/Refuse] 1 #&gt; 8 Lebanon 1 [Create more job opportunities] 35 #&gt; 9 Lebanon 2 [Raise wages for existing jobs] 14 #&gt; 10 Lebanon 3 [Lower the cost of living (limiting inflation)] 39 #&gt; 11 Lebanon 4 [Reform the education system] 1 #&gt; 12 Lebanon 5 [Encouraging foreign investment] 7 #&gt; 13 Lebanon 6 [Other] 2 #&gt; 14 Lebanon 666 [Don&#39;t know/Refuse] 0 #&gt; 15 Morocco 1 [Create more job opportunities] 38 #&gt; 16 Morocco 2 [Raise wages for existing jobs] 9 #&gt; 17 Morocco 3 [Lower the cost of living (limiting inflation)] 12 #&gt; 18 Morocco 4 [Reform the education system] 27 #&gt; 19 Morocco 5 [Encouraging foreign investment] 7 #&gt; 20 Morocco 666 [Don&#39;t know/Refuse] 6 summary_list$Q516A #&gt; # A tibble: 12 × 3 #&gt; # Groups: Country [3] #&gt; Country Q516A Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 1 [For people like me, it doesn&#39;t matter what kind of government we have] 8 #&gt; 2 Algeria 2 [Under some circumstances, a non-democratic government can be preferable] 15 #&gt; 3 Algeria 3 [Democracy is always preferable to any other kind of government] 54 #&gt; 4 Algeria 666 [Don&#39;t know/Refuse] 7 #&gt; 5 Lebanon 1 [For people like me, it doesn&#39;t matter what kind of government we have] 22 #&gt; 6 Lebanon 2 [Under some circumstances, a non-democratic government can be preferable] 28 #&gt; 7 Lebanon 3 [Democracy is always preferable to any other kind of government] 45 #&gt; 8 Lebanon 666 [Don&#39;t know/Refuse] 5 #&gt; 9 Morocco 1 [For people like me, it doesn&#39;t matter what kind of government we have] 15 #&gt; 10 Morocco 2 [Under some circumstances, a non-democratic government can be preferable] 11 #&gt; 11 Morocco 3 [Democracy is always preferable to any other kind of government] 60 #&gt; 12 Morocco 666 [Don&#39;t know/Refuse] 13 Excellent. On to plotting. 6.2.3 Create Many Plots Our next step is to take the list of summaries, and map it onto the function plot_comp_smry_stacked(). This will create a list of plots. We will save it to an object plot_list. plot_list &lt;- map( summary_list, plot_comp_smry_stacked ) This mapping worked without any extra inputs because plot_comp_smry_stacked() requires only one input. We can also see that the names of summary list carried through. names(plot_list) #&gt; [1] &quot;Q2061A&quot; &quot;Q118_1&quot; &quot;Q516A&quot; To look at each plot, we can simply call them by name. plot_list$Q2061A plot_list$Q118_1 plot_list$Q516A Hopefully you notice that just like when we created our first stacked plot with only the stacked data frame as an input, the caption needs to be set. The caption should be the same for every graph here. Since the input is constant, we can set that in the map() function just as we did with the data frame input in the previous section. plot_list &lt;- map( summary_list, plot_comp_smry_stacked, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot; ) Now, all plots should have the same caption. We can verify that by calling each of them. plot_list$Q2061A plot_list$Q118_1 plot_list$Q516A And there you have it! We have created many stacked plots! All together, the code looks like the following: variables_2_plot &lt;- c(&quot;Q2061A&quot;, &quot;Q118_1&quot;, &quot;Q516A&quot;) summary_list &lt;- map( variables_2_plot, calculate_comp_smry_stacked, ab_data = survey1 ) names(summary_list) &lt;- variables_2_plot plot_list &lt;- map( summary_list, plot_comp_smry_stacked, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot; ) 6.3 Extras 6.3.1 Long Legends You may have noticed the legends of many of these plots running off the page. Take the original stacked graph for Q2061A for example. plot_comp_smry_stacked(stacked_data_frame, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) Two rows does not seem to be enough to see all the categories in the legend. You can fix that with the guides() function from the ggplot2 package. plot_comp_smry_stacked(stacked_data_frame, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) + guides(fill = guide_legend(nrow = 3)) The input to the guides() function should be thought of as follows: “For the fill legend, use three rows.” You can change the number as you see fit. 6.3.2 Font Size Another way to get all the text to be visible is to change the font size. You can read how to do that in the chapter on changing the font size. 6.3.3 Colors You can learn how to change the colors for the stacked graph in the chapter on changing graph colors. 6.3.4 Order You can learn how to change the order for a stacked graph in the chapter on changing the order for a stacked graph. To learn more about piping and using %&gt;% in programming, see A Note on Piping in the ArabBarometR guide.↩︎ This only works if the variables are in a vector, not a list↩︎ "],["new-chapter-9.html", "Chapter 7 Single Country Multi-Question Plots 7.1 Prep Work 7.2 Create a Multiquestion Summary 7.3 Plot the Summary 7.4 Extras", " Chapter 7 Single Country Multi-Question Plots This chapter introduces two different ways to compare multiple questions in one country. One graphs summarizes questions like comparative graphs and plots those summaries. The other plots questions with the same value labels together in the style of individual graphs. The former is called a “short” summary, while the latter is called a “long” summary. These types of graphs are especially useful for plotting grid questions. Grid questions use the same stem, but have different endings. Technically, while related, they are all unique questions. Therefore, plotting a set of grid questions on the same graph, is the same thing as plotting multiple question on one graph. All questions are required to be the same type when using this function. Comparing the responses to different question types is not advised, so the function does not allow for it. TL;DR “Short” Summary At the end, your code will look like the following: questions_2_compare &lt;- c(&quot;Q210&quot;, &quot;Q211&quot;) questions_labels &lt;- c(&quot;Is there corruption?&quot;, &quot;Is the gov&#39;t cracking down?&quot;) # &quot;Short&quot; Summary: calculate_ind_smry_multiq_short(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_short(.title = &quot;Perceptions of Corruption in Algeria&quot;, .subtitle = &quot;% saying to a medium or large extent&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) That code will produce the following graph: #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. “Long” Summary At the end, your code will look like the following: questions_2_compare &lt;- c(&quot;Q210&quot;, &quot;Q211&quot;) questions_labels &lt;- c(&quot;Is there corruption?&quot;, &quot;Is the gov&#39;t cracking down?&quot;) # &quot;Long&quot; Summary: calculate_ind_smry_multiq_long(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_long(.title = &quot;Perceptions of Corruption in Algeria&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) That code will produce the following graph: #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. Let’s go! 7.1 Prep Work It is useful to do some prep work to keep everything clear. 7.1.1 Question Vector First create a vector of questions you want to include on your graph. For the example in this chapter we are comparing questions Q210 and Q211. We put the names of those variables in a vector and save that vector as an object. questions_2_compare &lt;- c( &quot;Q210&quot;, &quot;Q211&quot; ) Now the variables we want to graph as saved to the object questions_2_compare in a vector. 7.1.2 Question Labels The next step is to create a vector of labels for the questions. This is the text that will display on the y-axis. The labels should appear in the same order as they variables they are referring to. question_labels &lt;- c( &quot;Is there corruption?&quot;, # Text for Q210 &quot;Is the gov&#39;t cracking down?&quot; # Text for Q211 ) The object question_labels represents the text that will serve to label the responses on the graph. 7.2 Create a Multiquestion Summary Just like with the basic overall and demographic graphs, we begin by creating a data frame that summarizes our questions. The “short” and “long” summary functions require the same four main parameters: (1) the data you are using, (2) a vector of the variables you want to plot (not a list), (3) how you want the variables to be labeled in the legend, and (4) the country you want to plot it for. In the example for this chapter, the data we are using is survey1; the variables we want to plot are in the vector questions_2_compare; the labels we want to give them are in questions_labels; and the country we want to plot the data for is \"Algeria\". Both calculate_ind_smry_multiq_short() and calculate_ind_smry_multiq_long() take the same required arguments. We can see the different outputs below. 7.2.1 “Short” Summary The “short” summary version summarizes the variables in question like a comparative graph. That is, we see the results of who selected options 1 or 2 for ordinal variables and who selected option 1 for dichotomous or nominal variables. calculate_ind_smry_multiq_short(survey1, # Data questions_2_compare, # Question vector questions_labels, # Label vector &quot;Algeria&quot; # Country ) #&gt; # A tibble: 2 × 3 #&gt; Country Question Percent #&gt; &lt;chr&gt; &lt;chr+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria Q210 [Is there corruption?] 82 #&gt; 2 Algeria Q211 [Is the gov&#39;t cracking down?] 73 Let’s save this output to an object we can graph. ind_multiq_smry_short &lt;- calculate_ind_smry_multiq_short(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot; ) 7.2.2 “Long” Summary The “long” summary version summarizes the variables in question like an individual country graph. That is, in this case we see each the percent of citizens choosing each response option. calculate_ind_smry_multiq_long(survey1, # Data questions_2_compare, # Question vector questions_labels, # Label vector &quot;Algeria&quot; # Country ) #&gt; # A tibble: 10 × 3 #&gt; Question Response Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Is there corruption? 1 [To a large extent] 26 #&gt; 2 Is there corruption? 2 [To a medium extent] 43 #&gt; 3 Is there corruption? 3 [To a small extent] 7 #&gt; 4 Is there corruption? 4 [Not at all] 3 #&gt; 5 Is there corruption? 666 [Don&#39;t know/Refuse] 6 #&gt; 6 Is the gov&#39;t cracking down? 1 [To a large extent] 30 #&gt; 7 Is the gov&#39;t cracking down? 2 [To a medium extent] 29 #&gt; 8 Is the gov&#39;t cracking down? 3 [To a small extent] 14 #&gt; 9 Is the gov&#39;t cracking down? 4 [Not at all] 7 #&gt; 10 Is the gov&#39;t cracking down? 666 [Don&#39;t know/Refuse] 1 Let’s save this output to an object we can graph. ind_multiq_smry_long &lt;- calculate_ind_smry_multiq_long(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot; ) 7.3 Plot the Summary We are now ready to create our graphs. Each calculate_ function has its own plot_ function. If you try to plot a long summary with the short plot function or vise versa, your graph will look bad. The plot_ functions assume the data they are given is in a certain format. They do not adapt. 7.3.1 “Short” Plots To plot a “short” summary, use the function plot_ind_smry_multiq_short(). The function only requires one input: a data frame created by calculate_ind_smry_multiq_short(). In our example, we saved this data frame as ind_multiq_smry_short. plot_ind_smry_multiq_short(ind_multiq_smry_short) Notice there are several missing elements in this graph. Namely, an appropriate title, subtitle, and caption. These three aspects are not included in the list of required arguments, because a graph can be created without them. If you want to use the graph publicly, however, it would be prudent to include them. The parameters for including a title, subtitle, and caption are the same as they are in any other function: .title, .subtitle, and .caption, respectively. If you do not supply a title or subtitle, you will get a warning, like we see above. The graph is still created, but you are reminded that there is no title or subtitle. We can fill these in to create our final graph. plot_ind_smry_multiq_short( ind_multiq_smry_short, # Data frame .title = &quot;Perceptions of Corruption in Algeria&quot;, # Title .subtitle = &quot;% saying to a medium or large extent&quot;, # Subtitle .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot; # Caption ) Recall the object ind_multiq_smry_short is just the name we gave the output of calculate_ind_smry_multiq_short() from section (#short-summary-calc). We can substitute the calculation code back in here to produce the code (and graph) from the initial example. calculate_ind_smry_multiq_short(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_short(.title = &quot;Perceptions of Corruption in Algeria&quot;, .subtitle = &quot;% saying to a medium or large extent&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) 7.3.2 “Long” Plots To plot a “long” summary, use the function plot_ind_smry_multiq_long(). The function only requires one input: a data frame created by calculate_ind_smry_multiq_long(). In our example, we saved this data frame as ind_multiq_smry_long. plot_ind_smry_multiq_short(ind_multiq_smry_short) Notice there are several missing elements in this graph. Namely, an appropriate title, subtitle, and caption. These three aspects are not included in the list of required arguments, because a graph can be created without them. If you want to use the graph publicly, however, it would be prudent to include them. The parameters for including a title, subtitle, and caption are the same as they are in any other function: .title, .subtitle, and .caption, respectively. If you do not supply a title or subtitle, you will get a warning, like we see above. The graph is still created, but you are reminded that there is no title or subtitle. Note: you’ll probably want to use a different title or subtitle from a short summary graph. We can fill these in to create our final graph. plot_ind_smry_multiq_long( ind_multiq_smry_long, # Data frame .title = &quot;Perceptions of Corruption in Algeria&quot;, # Title .subtitle = &quot;% saying&quot;, # Subtitle .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot; # Caption ) Recall the object ind_multiq_smry_long is just the name we gave the output of calculate_ind_smry_multiq_long() from section (#long-summary-calc). We can substitute the calculation code back in here to produce the code (and graph) from the initial example. calculate_ind_smry_multiq_long(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_long(.title = &quot;Perceptions of Corruption in Algeria&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) 7.4 Extras 7.4.1 Explict Grid Example Remember: plotting a set of grid questions requires exactly the same steps as outlined throughout this chapter. There is no difference between plotting 2 (or n) questions that belong to a grid, and 2 (or n) questions that do not. “Short” Summary questions_2_compare &lt;- c(&quot;Q725_1&quot;, &quot;Q725_4&quot;, &quot;Q725_5&quot;, &quot;Q725_6&quot;) questions_labels &lt;- c(&quot;Joseph Biden&quot;, &quot;Xi Jingpin&quot;, &quot;Ali Khameni&quot;, &quot;Mohammed bin Salman&quot;) calculate_ind_smry_multiq_short(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_short(.title = &quot;Perceptions of world leader&#39;s foreign policies towards MENA&quot;, .subtitle = &quot;% saying it is very good or good&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) “Long” Summary questions_2_compare &lt;- c(&quot;Q725_1&quot;, &quot;Q725_4&quot;, &quot;Q725_5&quot;, &quot;Q725_6&quot;) questions_labels &lt;- c(&quot;Joseph Biden&quot;, &quot;Xi Jingpin&quot;, &quot;Ali Khameni&quot;, &quot;Mohammed bin Salman&quot;) # &quot;Long&quot; Summary: calculate_ind_smry_multiq_long(survey1, questions_2_compare, questions_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_long(.title = &quot;Perceptions world leader&#39;s foreign policies towards MENA&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1, Algeria&quot;) 7.4.2 Setting Colors By default, the colors for the graph are randomly selected from ArabBarometer_clr. To set the colors of the graph, supply a vector of hex codes or named Arab Barometer brand colors to the parameter .color_choice. Order matters. If you want certain questions to have certain colors, you must put the colors you want in the same order of the questions. For example, if you want Q210 to be \"AB purple\" (#796391) and Q211 to be \"AB yellow\" (#FBA950), you must provide the color vector as c(\"AB purple\",\"AB yellow\"), since the questions are in the order c(\"Q210\",\"Q211\"). 7.4.3 Warnings There are several points in this code when warnings or messages will appear even if you are using the code correctly. No need to panic. You can read about all of the messages and warnings that may appear even when the code is correct in the section How do I Understand (some) Messages, Warnings, and Errors. The functions calculate_ind_smry_multiq_short() and calculate_ind_smry_multiq_long() will produce a position_dodge() warning. You can read a bit about that here. If you do not supply a title or subtitle, a plot will still be created but you will receive a missing title and/or subtitle warning. You can read more about this here. "],["chapter-dem-multiq.html", "Chapter 8 Demographic Single Country Multi-Question Plots 8.1 Prep Work 8.2 Create a Summary 8.3 Plot a Multiquestion Demographic Summary for an Individual Country 8.4 Extras", " Chapter 8 Demographic Single Country Multi-Question Plots This chapter describes how to create a demographic summary of multiple questions for a single country on the same plot. As you (hopefully) know, there are two types of summaries/plots that you can create to show multiple questions on the same plot for a single country: a short summary and a long summary. If you are not familiar with these types, or still find them confusing, please see Chapter 12. There is only one type of demographic summary for multiple questions. The plot you create shows the demographic breakdown of a short summary. TL;DR At the end, your code will look like the following: questions_2_compare &lt;- c(&quot;Q210&quot;, &quot;Q211&quot;) question_labels &lt;- c(&quot;Is there corruption?&quot;, &quot;Is the gov&#39;t cracking down?&quot;) calculate_ind_smry_multiq_dem(survey1, &quot;gender&quot;, questions_2_compare, question_labels, &quot;Algeria&quot;) |&gt; plot_ind_smry_multiq_dem(.title = &quot;Perceptions of Corruption by gender&quot;, .subtitle = &quot;% saying to a great or medium extent&quot;, .caption = &quot;Arab Barometer Wave VI, Part 1, Algeria&quot;) And will produce the following graph: #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. Let’s go! 8.1 Prep Work The preparation work done here is exactly the same as that done here in Chapter 12 for creating non-demographic multi-question graphs. 8.1.1 Question Vector First create a vector of questions you want to include on your graph. For the example in this chapter we are comparing questions Q210 and Q211. We put the names of those variables in a vector and save that vector as an object. questions_2_compare &lt;- c( &quot;Q210&quot;, &quot;Q211&quot; ) Now the variables we want to graph as saved to the object questions_2_compare in a vector. 8.1.2 Question Labels The next step is to create a vector of labels for the questions. This is the text that will display on the y-axis. The labels should appear in the same order as they variables they are referring to. question_labels &lt;- c( &quot;Is there corruption?&quot;, # Text for Q210 &quot;Is the gov&#39;t cracking down?&quot; # Text for Q211 ) The object question_labels represents the text that will serve to label the responses on the graph. 8.2 Create a Summary Just like the last chapter (and many others before it), we begin by creating a data frame that summarizes our questions. To do that, we use the function calculate_ind_smry_multiq_dem(). The function require the same five main parameters: (1) the data you are using, (2) the demographic you want to group the data by, (3) a vector of the variables you want to plot (not a list), (4) how you want the variables to be labeled in the legend, and (5) the country you want to plot it for. This is the same list of required variables as calculate_ind_smry_multiq_short() and calculate_ind_smry_multiq_long() with one additional parameter specifying the demographic. In the example for this chapter, the data we are using is survey1; the demographic we want to group the data by is \"gender\"; the variables we want to plot are in the vector questions_2_compare; the labels we want to give them are in questions_labels; and the country we want to plot the data for is \"Algeria\". calculate_ind_smry_multiq_dem(survey1, # Data &quot;gender&quot;, # Demographic questions_2_compare, # Variable vector question_labels, # Variable labels &quot;Algeria&quot; # Country ) #&gt; # A tibble: 4 × 4 #&gt; # Groups: Country [1] #&gt; Country gender Question Percent #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria Female Q210 [Is there corruption?] 79 #&gt; 2 Algeria Female Q211 [Is the gov&#39;t cracking down?] 76 #&gt; 3 Algeria Male Q210 [Is there corruption?] 84 #&gt; 4 Algeria Male Q211 [Is the gov&#39;t cracking down?] 71 Notice the values of the column \"Question\" are labeled with the values we supplied to the parameter .question_labels. These are used for the legend. Let’s save the output to an object and graph the summary. ind_multiq_dem_smry &lt;- calculate_ind_smry_multiq_dem(survey1, &quot;gender&quot;, questions_2_compare, question_labels, &quot;Algeria&quot; ) Our summary is now saved to the object ind_multiq_dem_smry. 8.3 Plot a Multiquestion Demographic Summary for an Individual Country To plot a “short” summary, use the function plot_ind_smry_multiq_dem(). The function only requires one input: a data frame created by calculate_ind_smry_multiq_dem(). In our example, we saved this data frame as ind_multiq_dem_smry. plot_ind_smry_multiq_dem(ind_multiq_dem_smry) #&gt; Warning in title_function(.var = rlang::as_label(question), .title = .title, : ✖ There is currently no title for `Question`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning in subtitle_function(.var = rlang::as_label(question), .subtitle = .subtitle, : ✖ There is currently no subtitle for `Question`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. There are a few glaringly obvious issues to address here. The warnings and the lack of titles. The two are related. A warning does not mean something is wrong. Rather, it is the computer letting you know that it tried its best, but something may still be off. Two of these warnings relate to the absence of a title and subtitle in this plot. Those will disappear once we provide a title and subtitle. The third is generated by the package ggplot2 and will not go away. You can ignore it, which is what the rest of this chapter will do. To read more about these warnings, refer to the section How do I Understand (some) Messages, Warnings, and Errors?. Now let’s supply the title, subtitle, and caption by specifying the parameters .title, .subtitle, and .caption. plot_ind_smry_multiq_dem(ind_multiq_dem_smry, .title = &quot;Perceptions of Corruption by gender&quot;, .subtitle = &quot;% saying to a great or medium extent&quot;, .caption = &quot;Arab Barometer Wave VI, Part 1, Algeria&quot; ) We have our graph. Recalling that ind_multiq_dem_smry is just an object holding the output of our function calculate_ind_smry_multiq_dem() and its inputs, we can chain the two functions together. calculate_ind_smry_multiq_dem(survey1, &quot;gender&quot;, questions_2_compare, question_labels, &quot;Algeria&quot; ) |&gt; plot_ind_smry_multiq_dem(.title = &quot;Perceptions of Corruption by gender&quot;, .subtitle = &quot;% saying to a great or medium extent&quot;, .caption = &quot;Arab Barometer Wave VI, Part 1, Algeria&quot; ) If we include the prep work we did in our code chunk, we end with the same code from our initial example in the TL;DR section. 8.4 Extras 8.4.1 Setting Colors By default, the colors for the graph are randomly selected from ArabBarometer_clr. To set the colors of the graph, supply a vector of hex codes or named Arab Barometer brand colors to the parameter .color_choice. Order matters. If you want certain questions to have certain colors, you must put the colors you want in the same order of the questions. For example, if you want Q210 to be \"AB purple\" (#796391) and Q211 to be \"AB yellow\" (#FBA950), you must provide the color vector as c(\"AB purple\",\"AB yellow\"), since the questions are in the order c(\"Q210\",\"Q211\"). 8.4.2 Warnings There are several points in this code when warnings or messages will appear even if you are using the code correctly. No need to panic. You can read about all of the messages and warnings that may appear even when the code is correct in the section How do I Understand (some) Messages, Warnings, and Errors. The function plot_ind_smry_multiq_dem() will produce a position_dodge() warning. You can read a bit about that here. If you do not supply a title or subtitle, a plot will still be created but you will receive a missing title and/or subtitle warning. You can read more about this here. "],["chapter-10.html", "Chapter 9 Comparative Multi-Question Plots 9.1 Prep Work 9.2 Create a Summary 9.3 Plot a Comparative Multiquestion Graph 9.4 Extras", " Chapter 9 Comparative Multi-Question Plots This chapter teaches you how to create a single graph that summarizes responses for multiple variables for many countries. These types of graphs are especially useful for plotting grid questions. Grid questions use the same stem, but have different endings. Technically, while related, they are all unique questions. Therefore, plotting a set of grid questions on the same graph, is the same thing as plotting multiple question on one graph. All questions are required to be the same type when using this function. Comparing the responses to different question types is not advised, so the function does not allow for it. TL;DR At the end, your code will look like the following: questions_2_compare &lt;- list(&quot;Q210&quot;, &quot;Q211&quot;) question_labels &lt;- c(&quot;Is there corruption?&quot;, &quot;Is the gov&#39;t cracking down?&quot;) calculate_comp_smry_multiq(survey1, questions_2_compare, question_labels) |&gt; plot_comp_smry_multiq(.title = &quot;Perceptions of Corruption in MENA&quot;, .subtitle = &quot;% saying to a medium or large extent&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) That code will produce the following graph: Let’s go! 9.1 Prep Work The prep work for creating a multiquestion graph for many countries is exactly the same as the prep work suggested for creating a multiquesiton graph for a single country. 9.1.1 Question List First create a list of questions you want to include on your graph. For the example in this chapter we are comparing questions Q210 and Q211. We put the names of those variables in a list and save that list as an object. questions_2_compare &lt;- list( &quot;Q210&quot;, &quot;Q211&quot; ) Now the variables we want to graph as saved to the object questions_2_compare in a list. 9.1.2 Question Labels The next step is to create a vector of labels for the questions. This is the text that will display on the y-axis. The labels should appear in the same order as they variables they are referring to. question_labels &lt;- c( &quot;Is there corruption?&quot;, # Text for Q210 &quot;Is the gov&#39;t cracking down?&quot; # Text for Q211 ) The object question_labels represents the text that will serve to label the responses on the graph. 9.2 Create a Summary Now we create our summary. The function calculate_comp_smry_multiq() is used to create a summary for multiple countries that displays responses to multiple questions. There are three required arguments. They are: ab_data, ab_vars, and ab_labels. The parameter ab_data is the for Arab Barometer data frame. The ab_vars parameter requires a vector of questions. This is how the function knows which questions to include on the graph. We created a list, questions_2_compare, in the section above. The ab_labels parameter requires a vector of question labels. The labels must appear in the same order as the questions to appear on the graph correctly. We created a vector, questions_labels, in the section above. Time to fill in our function. The data we are using for the example is survey1. calculate_comp_smry_multiq( ab_data = survey1, ab_vars = questions_2_compare, ab_labels = question_labels ) #&gt; Country Question Percent #&gt; 1 Algeria Q210 82 #&gt; 2 Lebanon Q210 97 #&gt; 3 Morocco Q210 70 #&gt; 4 Algeria Q211 73 #&gt; 5 Lebanon Q211 8 #&gt; 6 Morocco Q211 72 Notice that the column \"Question\" is labeled. This is where the labels in our legend will come from. Let’s save the output to an object we can feed to our plotting function in the next section. comp_multiq_smry &lt;- calculate_comp_smry_multiq( survey1, questions_2_compare, question_labels ) 9.3 Plot a Comparative Multiquestion Graph Next we use the function plot_comp_smry_multiq() to create a plot of our summary. The function only requires one parameter, ab_summary. We will use the summary we created above and saved to the object comp_multiq_smry. plot_comp_smry_multiq( ab_summary = comp_multiq_smry ) #&gt; Warning in title_function(.var = &quot;multiquestion graphs&quot;, .title = .title, : ✖ There is currently no title for `multiquestion graphs`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning in subtitle_function(.var = &quot;multiquestion graphs&quot;, .subtitle = .subtitle, : ✖ There is currently no subtitle for `multiquestion graphs`. #&gt; ℹ Please specify your own until this has been corrected. Notice there are several missing elements in this graph. Namely, an appropriate title, subtitle, and caption. These three aspects are not included in the list of required arguments, because a graph can be created without them. If you want to use the graph publicly, however, it would be prudent to include them. You may notice the warnings as well. Some warnings are telling you a graph was made, but there is no title or subtitle. These will go away once we provide a title and subtitle. You can read more about these warnings in the section How do I Understand (some) Messages, Warnings, and Errors. The rest of the chapter supresses the warnings. The parameters for including a title, subtitle, and caption are the same as they are in any other function: .title, .subtitle, and .caption, respectively. We can fill these in to create our final graph. plot_comp_smry_multiq( ab_summary = comp_multiq_smry, .title = &quot;Perceptions of Corruption in MENA&quot;, .subtitle = &quot;% saying to a medium or large extent&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot; ) 9.4 Extras 9.4.1 Setting Colors By default, the colors for the graph are randomly selected from ArabBarometer_clr. To set the colors of the graph, supply a vector of hex codes or named Arab Barometer brand colors to the parameter .color_choice. 9.4.2 Select Countries By default, all the countries in the data frame you pass to the calculate function are included in the summary. You can filter these countries with the .select_countries parameter. You can learn more about the .select_countries filter in the section How do I Show Only Certain Countries? 9.4.3 Explict Grid Example Remember: plotting a set of grid questions requires exactly the same steps as outlined throughout this chapter. There is no difference between plotting 2 (or n) questions that belong to a grid, and 2 (or n) questions that do not. # Identifying two question from a grid set: questions_2_compare &lt;- list( &quot;Q201A_1&quot;, &quot;Q201A_2&quot; ) # Supplying labels: question_labels &lt;- c( &quot;Government&quot;, &quot;Legal system&quot; ) # Plotting the grid questions: calculate_comp_smry_multiq(survey1, questions_2_compare, question_labels) |&gt; plot_comp_smry_multiq(.title = &quot;How much trust do you have in...&quot;, .subtitle = &quot;% saying they have quite a lot or a great deal&quot;, .caption = &quot;Arab Barometer Wave VI, Survey 1&quot;) 9.4.4 Warnings There are several points in this code when warnings or messages will appear even if you are using the code correctly. No need to panic. You can read about all of the messages and warnings that may appear even when the code is correct in the section How do I Understand (some) Messages, Warnings, and Errors. The function plot_comp_smry_multiq() will produce a position_dodge() warning. You can read a bit about that here. If you do not supply a title or subtitle, a plot will still be created but you will receive a missing title and/or subtitle warning. You can read more about this here. "],["chapter-5.html", "Chapter 10 Single Country Trend Graphs TL;DR 10.1 Prep Work 10.2 Create a Summary 10.3 Plot the Summary 10.4 Extras", " Chapter 10 Single Country Trend Graphs This chapter will cover how to create trend graphs for one country. Prior to this, we have only used a single data set, survey1. We will now also use the data sets survey2 and survey3. Refer to the assumed header code to see where survey1, survey2, and survey3 came from. TL;DR At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) calculate_ind_trend(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend(.caption = &quot;Arab Barometer Wave VI, Algeria&quot;) The code produces this graph: Let’s go! 10.1 Prep Work It is useful to do some prep work to keep everything clear. Just as we did some prep work for multi-question graphs in Chapters 7.1 and 9.1, we will take some pre-graph-creation steps to make our lives easier down the road. Create a Data Frame List The first step is to create a list of data frames. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_ind_trend() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. The data frame lists in the Wave8TrendData package do this step for you. Create a Date Vector The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_ind_trend() function will put the data in the correct order according to the language of the graph. Now that we have defined our data frame list and survey dates, we can create our trend plot. The date vectors in the Wave8TrendData package do this step for you. 10.2 Create a Summary Like always, the first step in creating a graph is creating a summary. To do this for an individual trend graph, we use the function calculate_ind_trend(). The function calculate_ind_trend() requires four parameters: .var, data_frames, survey_dates, and select_country. To see a complete list of parameters, including optional ones, use ?plot_trend_individual() in your R console. The parameter .var is the variable you want to plot. It must have the same name in every data frame in the data frame list. If the variable you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The trend data lists from the Wave8TrendData package ensure this is true for Wave VIII variables. The parameter data_frames is a list of data frames. This is what we created here. The parameter survey_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. The parameter select_country is the name of the country you want to create the graph for. Now let’s fill it in. calculate_ind_trend( .var = &quot;Q1COVID19&quot;, # Variable to graph data_frames = df_list, # List of data frames survey_dates = survey_dates, # Vector of survey dates select_country = &quot;Algeria&quot; # Country to graph ) The output should look like the following, with the Survey column labeled. Survey Question Country Percent 1 Q1COVID19 Algeria 72 2 Q1COVID19 Algeria 69 3 Q1COVID19 Algeria 50 We can see the resulting data frame has three rows; one for each survey we are plotting. Let’s save the output as an object so we can plot that object in the next section. individual_trend_summary &lt;- calculate_ind_trend( &quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot; ) 10.3 Plot the Summary The next step is to plot the summary we just created. To do that, we use the function plot_ind_trend(). This function only requires one argument: ab_summary. Like many other graphs, we’ll want to add a bit later on. To see a complete list of parameters, including optional ones, use ?plot_ind_trend() in your R console. For now, let’s see what happens when we just supply our summary we saved as individual_trend_summary. plot_ind_trend( ab_summary = individual_trend_summary ) Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_ind_trend( ab_summary = individual_trend_summary, .caption = &quot;Arab Barometer Wave VI, Algeria&quot; ) Putting all the steps together, we have the code and graph we originally started with. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) calculate_ind_trend(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend(.caption = &quot;Arab Barometer Wave VI, Algeria&quot;) 10.4 Extras 10.4.1 Font Size The font size default brand size is used for the graph text. You can learn how to change that in the chapter on changing the font size. 10.4.2 Colors You can learn how to change the colors for the single country trend graph in the chapter on changing graph colors. "],["chapter-6.html", "Chapter 11 Single Country Demographic Trend Graphs TL;DR 11.1 Prep Work 11.2 Create a Summary 11.3 Plot the Summary 11.4 Extras", " Chapter 11 Single Country Demographic Trend Graphs TL;DR At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) calculate_ind_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend_dem(.caption = &quot;Arab Barometer Wave VI, Algeria&quot;) The code produces this graph: Hopefully you notice how similar this code is to the code in Chapter 5. The only difference here is that the user must include a line specifying the demographic. 11.1 Prep Work The prep work for creating a demographic trend graph for a single country is exactly the same as the prep work suggested for creating a trend graph for a single country. Create a Data Frame List The first step is to create a list of data frames. This section is exactly the same as the one from here. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_ind_trend_dem() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. The data frame lists in the Wave8TrendData package do this step for you. Create a Date Vector This section is exactly the same as the one from here. The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_ind_trend_dem() function will put the data in the correct order according to the language of the graph. Now that we have defined our data frame list and survey dates, we can create our demographic trend plot. The date vectors in the Wave8TrendData package do this step for you. 11.2 Create a Summary To create a demographic trend summary for an individual country, use the calculate_ind_trend_dem() function. This function takes a few more parameters, and in a different order, than the functions we have worked with so far. In total, there are five necessary parameters: .var, .dem, data_frames, survey_dates, and select_country. To see a complete list of parameters, including optional ones, use ?calculate_ind_trend_dem() in your R console. The parameter .var is the variable you want to plot. It must have the same name in every data frame in the data frame list. If the variable you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The trend data lists from the Wave8TrendData package ensure this is true for Wave VIII variables. The parameter .dem is the demographic you want to see the variable trends for. Much like the .var parameter, it must have the same name in every data frame in the data frame list. If the demographic you want to plot is named \"gender\" in one sure, but \"GENDER\" in another, the function will break. The parameter data_frames is a list of data frames. This is what we created here. The parameter survey_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. The parameter select_country is the name of the country you want to create the graph for. Now let’s fill it in. calculate_ind_trend_dem( .var = &quot;Q1COVID19&quot;, # Variable to graph .dem = &quot;gender&quot;, # Demographic to see over time data_frames = df_list, # List of data frames survey_dates = survey_dates, # Vector of survey dates select_country = &quot;Algeria&quot; # Country to graph ) The output should look like the following, with the Survey column labeled. Survey Question Country gender Percent 1 Q1COVID19 Algeria Female 77 1 Q1COVID19 Algeria Male 66 2 Q1COVID19 Algeria Female 78 2 Q1COVID19 Algeria Male 60 3 Q1COVID19 Algeria Female 51 3 Q1COVID19 Algeria Male 50 We can see the resulting data frame has six rows; one for each demographic in each survey we are plotting. Let’s save the output as an object so we can plot that object in the next section. individual_demographic_trend_summary &lt;- calculate_ind_trend_dem( &quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot; ) 11.3 Plot the Summary The next step is to plot the summary we just created. To do that, we use the function plot_ind_trend_dem(). This function only requires one argument: ab_summary. Like many other graphs, we’ll want to add a bit later on. To see a complete list of parameters, including optional ones, use ?plot_ind_trend_dem() in your R console. For now, let’s see what happens when we just supply our summary we saved as individual_demographic_trend_summary. plot_ind_trend_dem( ab_summary = individual_demographic_trend_summary ) Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_ind_trend_dem( ab_summary = individual_demographic_trend_summary, .caption = &quot;Arab Barometer Wave VI, Algeria&quot; ) Putting all the steps together, we have the code and graph we originally started with. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) calculate_ind_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend_dem(.caption = &quot;Arab Barometer Wave VI, Algeria&quot;) 11.4 Extras 11.4.1 Human Readable If you just want to look at the summaries and not necessarily create a plot, the output of calculate_ind_trend_dem() might not be the easiest to understand from a glance. There is a parameter called human_readable that is designed to help with that. By default, human_readable is set to FALSE and each row is unique to the survey-demographic. If human_readable is set to TRUE, each is unique to a survey and there are columns for each demographic. calculate_ind_trend_dem( .var = &quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, data_frames = df_list, survey_dates = survey_dates, select_country = &quot;Algeria&quot;, human_readable = FALSE # This is the default ) Default setting with human_readable = FALSE. Survey Question Country gender Percent 1 Q1COVID19 Algeria Female 77 1 Q1COVID19 Algeria Male 66 2 Q1COVID19 Algeria Female 78 2 Q1COVID19 Algeria Male 60 3 Q1COVID19 Algeria Female 51 3 Q1COVID19 Algeria Male 50 calculate_ind_trend_dem( .var = &quot;Q1COVID19&quot;, .dem = &quot;gender&quot;, data_frames = df_list, survey_dates = survey_dates, select_country = &quot;Algeria&quot;, human_readable = TRUE # This is NOT the default ) Default setting with human_readable = TRUE. Survey Question Country Female Male 1 Q1COVID19 Algeria 77 66 2 Q1COVID19 Algeria 78 60 3 Q1COVID19 Algeria 51 50 The default is set to FALSE because that is the structure plot_ind_trend_dem() expects. If you set human_readable to TRUE and use that output in plot_ind_trend_dem(), you will get an error. 11.4.2 Font Size The font size default brand size is used for the graph text. You can learn how to change that in the chapter on changing the font size. 11.4.3 Colors You can learn how to change the colors for the single country trend graph in the chapter on changing graph colors. "],["chapter-7.html", "Chapter 12 Comparative Country Trend Graphs TL;DR 12.1 Prep Work 12.2 Create a Summary 12.3 Plot the Summary 12.4 Extras", " Chapter 12 Comparative Country Trend Graphs The chapter covers how to create a trend graph for many countries, not just one. TL;DR At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) ab_survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) calculate_comp_trend(&quot;Q1COVID19&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend(.caption = &quot;Arab Barometer Wave VI&quot;) The code produces this graph: You may notice that the code here is very similar to that for single country trend graphs. In fact, the only differences are that the user does not have to specify a country and the names of the function. Let’s go! 12.1 Prep Work Just like in Chapter 10 (and all the other trend plot chapters), it is useful to do some prep work before hand. This makes your work more clear and your life easier down the line. The prep work for creating a comparative trend graph is exactly the same as the prep work suggested for creating a trend graph for a single country. 12.1.1 Create a Data Frame List The first step is to create a list of data frames. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_comp_trend() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. The data frame lists in the Wave8TrendData package do this step for you. 12.1.2 Create a Date Vector The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. ab_survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_comp_trend() function will put the data in the correct order according to the language of the graph. The date vectors in the Wave8TrendData package do this step for you. Now that we have defined our data frame list and survey dates, we can create our trend plot. 12.2 Create a Summary To calculate a trend summary for multiple countries, use the calculate_comp_trend() function. This function takes a few more parameters, and in a different order, than the functions we have worked with so far. In total, there are three necessary parameters: ab_var, ab_df_list, and ab_survey_dates. To see a complete list of parameters, including optional ones, use ?calculate_comp_trend() in your R console. The parameter ab_var is the variable you want to plot. It must have the same name in every data frame in the data frame list. If the variable you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The trend data lists from the Wave8TrendData package ensure this is true for Wave VIII variables. The parameter ab_df_list is a list of data frames. This is what we created here. The parameter ab_survey_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. Now let’s fill it in. calculate_comp_trend( ab_var = &quot;Q1COVID19&quot;, # Variable to graph ab_df_list = df_list, # List of data frames ab_survey_dates = ab_survey_dates # Vector of survey dates ) The output should look like the following, with the Survey column labeled. Survey Question Country Percent 1 Q1COVID19 Algeria 72 1 Q1COVID19 Lebanon 82 1 Q1COVID19 Morocco 65 2 Q1COVID19 Algeria 69 2 Q1COVID19 Lebanon 85 2 Q1COVID19 Morocco 75 3 Q1COVID19 Algeria 50 3 Q1COVID19 Lebanon 83 3 Q1COVID19 Morocco 52 We can see the output has nine rows; one for each country for each survey. Let’s save the output as an object so we can plot that object in the next section. comparative_trend_summary &lt;- calculate_comp_trend( &quot;Q1COVID19&quot;, df_list, ab_survey_dates ) 12.3 Plot the Summary The next step is to plot the summary we just created. To do that, we use the function plot_comp_trend(). This function only requires one argument: ab_summary. Like many other graphs, we’ll want to add a bit later on. To see a complete list of parameters, including optional ones, use ?plot_comp_trend() in your R console. For now, let’s see what happens when we just supply our summary we saved as comparative_trend_summary. plot_comp_trend( ab_summary = comparative_trend_summary ) Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_comp_trend( ab_summary = comparative_trend_summary, .caption = &quot;Arab Barometer Wave VI&quot; ) Putting all the steps together, we have the code and graph we originally started with. df_list &lt;- list( survey1, survey2, survey3 ) ab_survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) calculate_comp_trend(&quot;Q1COVID19&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend(.caption = &quot;Arab Barometer Wave VI&quot;) 12.4 Extras 12.4.1 Human Readable If you just want to look at the summaries and not necessarily create a plot, the output of calculate_comp_trend() might not be the easiest to understand from a glance. There is a parameter called human_readable that is designed to help with that. By default, human_readable is set to FALSE and each row is unique to the survey-country. If human_readable is set to TRUE, each is unique to a country and there are columns for each wave. calculate_comp_trend( ab_var = &quot;Q1COVID19&quot;, ab_df_list = df_list, ab_survey_dates = ab_survey_dates, human_readable = FALSE # This is the default ) Default setting with human_readable = FALSE. Survey Question Country Percent 1 Q1COVID19 Algeria 72 1 Q1COVID19 Lebanon 82 1 Q1COVID19 Morocco 65 2 Q1COVID19 Algeria 69 2 Q1COVID19 Lebanon 85 2 Q1COVID19 Morocco 75 3 Q1COVID19 Algeria 50 3 Q1COVID19 Lebanon 83 3 Q1COVID19 Morocco 52 calculate_comp_trend( ab_var = &quot;Q1COVID19&quot;, ab_df_list = df_list, ab_survey_dates = ab_survey_dates, human_readable = TRUE # This is NOT the default ) Default setting with human_readable = TRUE. Question Country Wave1 Wave2 Wave3 Q1COVID19 Algeria 72 69 50 Q1COVID19 Lebanon 82 85 83 Q1COVID19 Morocco 65 75 52 The default is set to FALSE because that is the structure plot_comp_trend() expects. If you set human_readable to TRUE and use that output in plot_comp_trend(), you will get an error. 12.4.2 Country Wrap Sometimes you may want to compare all the countries in one graph, but not have all the lines on top of each other. To create a graph with all the countries in their own facet, you can use the parameter .country_wrap. By default this parameter is set to FALSE, but if the user sets it to TRUE the graph will display each country’s trend individual. Example code and graph is below. calculate_comp_trend(&quot;Q1COVID19&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend(.caption = &quot;Arab Barometer Wave VI&quot;, .country_wrap = TRUE) 12.4.3 Select Countries By default, calculate_comp_trend() plots data for all the countries in the data. To learn how to plot data from select countries, see the chapter on selecting countries. 12.4.4 Font Size The font size default brand size is used for the graph text. You can learn how to change that in the chapter on changing the font size. 12.4.5 Colors You can learn how to change the colors for the comparative trend graph in the chapter on changing graph colors. "],["chapter-8.html", "Chapter 13 Comparative Country Demographic Trend Graphs TL;DR 13.1 Prep Work 13.2 Create a Summary 13.3 Plot the Summary 13.4 Extras", " Chapter 13 Comparative Country Demographic Trend Graphs This chapter will show you how to compare trend behavior of different demographics across countries. A comparative demographic trend graph can be shown in two different styles: either panels of graphs show the demographic trend by country, or panels of graphs showing the country trends by demographic. This chapter will demonstrate how to create both. TL;DR At the end, your code will look like the following: df_list &lt;- list( survey1, survey2, survey3 ) ab_survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) # One plot per Country calculate_comp_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend_dem(.caption = &quot;Arab Barometer Wave VI&quot;) # One plot per demographic calculate_comp_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend_dem(.facet_choice = &quot;demographic&quot;, .caption = &quot;Arab Barometer Wave VI&quot;) The code produces this graphs: The code should look similar to that in the previous chapter. The main difference is the inclusion of the demographic variable. 13.1 Prep Work Just like in Chapter 12 (and all the other trend plot chapters), it is useful to do some prep work before hand. This makes your work more clear and your life easier down the line. The prep work for creating a demographic comparative trend graph is exactly the same as the prep work suggested for creating a trend graph for a single country. Create a Data Frame List The first step is to create a list of data frames. This section is exactly the same as the one from here. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_comp_trend_dem() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. The data frame lists in the Wave8TrendData package do this step for you. Create a Date Vector This section is exactly the same as the one from here. The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. ab_survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_comp_trend_dem() function will put the data in the correct order according to the language of the graph. The data frame lists in the Wave8TrendData package do this step for you. Now that we have defined our data frame list and survey dates, we can create our demographic trend plot. 13.2 Create a Summary To create a demographic trend summary for multiple countries, use the calculate_comp_trend_dem() function. In total, there are four necessary parameters: ab_var, demographic, ab_df_list, and ab_survey_dates. To see a complete list of parameters, including optional ones, use ?calculate_comp_trend_dem() in your R console. The parameter ab_var is the variable you want to plot. It must have the same name in every data frame in the data frame list. If the variable you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The trend data lists from the Wave8TrendData package ensure this is true for Wave VIII variables. The parameter demographic is the demographic you want to see the variable trends for. Much like the ab_var parameter, it must have the same name in every data frame in the data frame list. If the demographic you want to plot is named \"gender\" in one sure, but \"GENDER\" in another, the function will break. The trend data lists from the Wave8TrendData package ensure this is true for Wave VIII variables. The parameter ab_df_list is a list of data frames. This is what we created here. The data frame lists in the Wave8TrendData package do this step for you. The parameter ab_survey_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. The data frame lists in the Wave8TrendData package do this step for you. Now let’s fill it in. calculate_comp_trend_dem( ab_var = &quot;Q1COVID19&quot;, # Variable to graph demographic = &quot;gender&quot;, # Demographic to see over time ab_df_list = df_list, # List of data frames ab_survey_dates = ab_survey_dates # Vector of survey dates ) Survey Question Country gender Percent 1 Q1COVID19 Algeria Female 77 1 Q1COVID19 Algeria Male 66 1 Q1COVID19 Lebanon Female 87 1 Q1COVID19 Lebanon Male 77 1 Q1COVID19 Morocco Female 75 1 Q1COVID19 Morocco Male 56 2 Q1COVID19 Algeria Female 78 2 Q1COVID19 Algeria Male 60 2 Q1COVID19 Lebanon Female 85 2 Q1COVID19 Lebanon Male 84 2 Q1COVID19 Morocco Female 77 2 Q1COVID19 Morocco Male 74 3 Q1COVID19 Algeria Female 51 3 Q1COVID19 Algeria Male 50 3 Q1COVID19 Lebanon Female 84 3 Q1COVID19 Lebanon Male 83 3 Q1COVID19 Morocco Female 56 3 Q1COVID19 Morocco Male 47 We can see the output has 18 rows; one for each demographic for country for each survey. Let’s save the output as an object so we can plot that object in the next section. comparative_dem_trend_summary &lt;- calculate_comp_trend_dem( &quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates ) 13.3 Plot the Summary To plot the summary we just created, we use the function plot_comp_trend_dem(). This one takes one and a half parameters. …What? Well, the only required parameter is ab_summary, which is the output of calculate_comp_trend_dem(), our summary. The “half” parameter is the .facet_choice parameter. There is a lot of information we are trying to include in one plot here. In order to effectively communicate the trend, we need to decide whether to group the data by country or by demographic. You do this by setting .facet_choice to either \"Country\" or \"demographic\". By default, .facet_choice is set to \"Country\". If the user does not enter anything for the .facet_choice, the graph produced will display results by country. If the user wants to display the results by demographic, they will need to set .facet_choice to \"demographic\". Hence, “half” a parameter. The function will still work without the user explicitly changing the .facet_choice parameter, but it is still an important parameter to be aware of. The next two sections will go through the each case of .facet_choice. 13.3.1 Option 1: Facet choice is \"Country\" (default) Let’s start with wrapping the graph by country, as that is likely the most common setting and the default. Since .facet_choice = \"Country\" is the default setting, the user does not need to explicitly include it. plot_comp_trend_dem( ab_summary = comparative_dem_trend_summary ) Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_comp_trend_dem( comparative_dem_trend_summary, .caption = &quot;Arab Barometer Wave VI&quot; ) Putting all the steps together, we get the first half of the code we started with. df_list &lt;- list( survey1, survey2, survey3 ) ab_survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) calculate_comp_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend_dem(.caption = &quot;Arab Barometer Wave VI&quot;) Option 2: Facet choice is \"demographic\" Now we will go through how to wrap the graph by demographic. Using this setting will produce a graph that has one title and subtitle, but multiple plots, just as in the previous section. Now, each plot will show trend lines for each country, but only for a single demographic category. In this example, we use “gender”. That means when we wrap by demographic, there will be one comparative trend graph just showing the trends of men and one comparative trend graph just showing the trends of women. plot_comp_trend_dem( comparative_dem_trend_summary, .facet_choice = &quot;demographic&quot; ) Nearly there! What still needs to be changed? The caption, of course! Just as in all the other plot_ functions in the ArabBarometR package, you can change the caption using the .caption parameter. plot_comp_trend_dem( comparative_dem_trend_summary, .facet_choice = &quot;demographic&quot;, .caption = &quot;Arab Barometer Wave VI&quot; ) Putting all the steps together, we get the second half of the code we started with. df_list &lt;- list( survey1, survey2, survey3 ) ab_survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) plot_comp_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates, &quot;demographic&quot;, .caption = &quot;Arab Barometer Wave VI&quot;) With both options demonstrated, we have the complete original code. df_list &lt;- list( survey1, survey2, survey3 ) ab_survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) # One plot per Country calculate_comp_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend_dem(.caption = &quot;Arab Barometer Wave VI&quot;) # One plot per demographic calculate_comp_trend_dem(&quot;Q1COVID19&quot;, &quot;gender&quot;, df_list, ab_survey_dates) |&gt; plot_comp_trend_dem(.facet_choice = &quot;demographic&quot;, .caption = &quot;Arab Barometer Wave VI&quot;) 13.4 Extras 13.4.1 Human Readable If you just want to look at the summaries and not necessarily create a plot, the output of calculate_comp_trend_dem() might not be the easiest to understand from a glance. There is a parameter called human_readable that is designed to help with that. By default, human_readable is set to FALSE and each row is unique to the survey-country-demographic. If human_readable is set to TRUE, each is unique to a country-demographic and there are columns for each survey. calculate_comp_trend_dem( ab_var = &quot;Q1COVID19&quot;, demographic = &quot;gender&quot;, ab_df_list = df_list, ab_survey_dates = ab_survey_dates, human_readable = FALSE # This is the default ) Default setting with human_readable = FALSE. Survey Question Country gender Percent 1 Q1COVID19 Algeria Female 77 1 Q1COVID19 Algeria Male 66 1 Q1COVID19 Lebanon Female 87 1 Q1COVID19 Lebanon Male 77 1 Q1COVID19 Morocco Female 75 1 Q1COVID19 Morocco Male 56 2 Q1COVID19 Algeria Female 78 2 Q1COVID19 Algeria Male 60 2 Q1COVID19 Lebanon Female 85 2 Q1COVID19 Lebanon Male 84 2 Q1COVID19 Morocco Female 77 2 Q1COVID19 Morocco Male 74 3 Q1COVID19 Algeria Female 51 3 Q1COVID19 Algeria Male 50 3 Q1COVID19 Lebanon Female 84 3 Q1COVID19 Lebanon Male 83 3 Q1COVID19 Morocco Female 56 3 Q1COVID19 Morocco Male 47 calculate_comp_trend_dem( ab_var = &quot;Q1COVID19&quot;, demographic = &quot;gender&quot;, ab_df_list = df_list, ab_survey_dates = ab_survey_dates, human_readable = TRUE # This is NOT the default ) Default setting with human_readable = TRUE. Question Country Demographic Wave1 Wave2 Wave3 Q1COVID19 Algeria Female 77 78 51 Q1COVID19 Algeria Male 66 60 50 Q1COVID19 Lebanon Female 87 85 84 Q1COVID19 Lebanon Male 77 84 83 Q1COVID19 Morocco Female 75 77 56 Q1COVID19 Morocco Male 56 74 47 The default is set to FALSE because that is the structure plot_comp_trend_dem() expects. If you set human_readable to TRUE and use that output in plot_comp_trend_dem(), you will get an error. 13.4.2 Select Countries By default, calculate_comp_trend_dem() plots data for all the countries in the data. To learn how to plot data from select countries, see the chapter on selecting countries. 13.4.3 Font Size The font size default brand size is used for the graph text. You can learn how to change that in the chapter on changing the font size. 13.4.4 Colors You can learn how to change the colors for the comparative trend graph in the chapter on changing graph colors. "],["chapter-12.html", "Chapter 14 Single Country Multi-Question Trend Plots TL;DR 14.1 Prep Work 14.2 Create a Summary 14.3 Plot the Summary 14.4 Extras", " Chapter 14 Single Country Multi-Question Trend Plots TL;DR At the end, your code will look like the following: questions_2_compare &lt;- c(&quot;Q2061A_1&quot;, &quot;Q2061A_15&quot;) question_labels &lt;- c(&quot;Economic situtation&quot;, &quot;COVID-19&quot;) df_list &lt;- list(survey1, survey2, survey3) ab_survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) calculate_ind_trend_multiq(questions_2_compare, df_list, ab_survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend_multiq(.title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;, legend_names = question_labels) That code will produce the following graph: Let’s go! 14.1 Prep Work Since we are creating both a trend graph and a graph that displays multiple questions, it should hopefully make sense that the suggested prep work is a combination of the suggested prep work for multi-question graphs and the prep work suggested for creating a trend graph for a single country. 14.1.1 Question Vector First create a vector of questions you want to include on your graph. For the example in this chapter we are comparing questions Q2061A_1 and Q2061A_15. We put the names of those variables in a vector and save that vector as an object. questions_2_compare &lt;- c( &quot;Q2061A_1&quot;, &quot;Q2061A_15&quot; ) Now the variables we want to graph as saved to the object questions_2_compare in a vector. 14.1.2 Question Labels The next step is to create a vector of labels for the questions. This is the text that will display on the y-axis. The labels should appear in the same order as they variables they are referring to. question_labels &lt;- c( &quot;Economic situation&quot;, # Text for Q2061A_1 &quot;COVID-19&quot; # Text for Q2061A_15 ) The object question_labels represents the text that will serve to label the responses on the graph. 14.1.3 Create a Data Frame List The first step is to create a list of data frames. This section is exactly the same as the one from here. There should be one data frame for each period you wish to graph. That is, each data frame should be from a different survey you want to include in your graph. In the example for the chapter, we’re using the three surveys from Wave VI, which we call survey1, survey2, and survey3. Each survey is its own data frame. df_list &lt;- list( survey1, survey2, survey3 ) The list of data frames should be in the order you want them to appear (ideally, chronologically). The data on the graph will show up in the order of the list. So if you create a list in the order list(survey2, survey1, survey3), the data from survey2 will show up before the data from survey1. Please note: This is ambivalent to language! The plot_ind_trend_multiq() function will assume the order of the list is the correct order, and treat it accordingly. When you enter a list as list(survey1, survey2, surveye3), the English graph will show the data right to left (survey 1 -&gt; survey 2 -&gt; survey 3), while the Arabic graph will show the data left to right (survey 3 &lt;- survey 2 &lt;- survey 1). You do not need to alter your input. The data frame lists in the Wave8TrendData package do this step for you. 14.1.4 Create a Date Vector This section is exactly the same as the one from here. The next step is to create a vector of the dates you want to show on the x-axis of your graph. Branding guidelines call for the years in which the survey took place. For simplicity in the example, let’s just say \"Survey X Year\". You need a date for each data frame in your data frame list. Otherwise, the function won’t know how to label the x-axis. ab_survey_dates &lt;- c(&quot;Survey 1 Year&quot;, &quot;Survey 2 Year&quot;, &quot;Survey 3 Year&quot;) The dates should also be in the order you want them to appear. The dates should line up with the data frames. In the chapter example, the order of the data frames is survey 1, survey 2, survey 3. Therefore, the survey dates need to have the order survey 1 year, survey 2 year, survey 3 year. Please note: This is ambivalent to language! Just as with the data frame list, the plot_ind_trend_multiq() function will put the data in the correct order according to the language of the graph. Now that we have defined our data frame list and survey dates, we can create our multi-question trend plot. The date vectors in the Wave8TrendData package do this step for you. 14.2 Create a Summary To create a multiquestion trend summary for an individual country, use the calculate_ind_trend_multiq() function. This function takes a few more parameters, and in a different order, than the functions we have worked with so far. In total, there are four necessary parameters: ab_var_list, ab_df_list, ab_survey_dates, and select_country. To see a complete list of parameters, including optional ones, use ?calculate_ind_trend_multiq() in your R console. The parameter ab_var_list are the variables you want to plot. This is what we created here. They must have the same name in every data frame in the data frame list. If one of the variables you want to plot is named \"Q101\" in one sure, but \"Q102\" in another, the function will not include \"Q102\" in the plot. Computers can do a lot but as of yet they cannot think critically, so the onus is on you. The trend data lists from the Wave8TrendData package ensure this is true for Wave VIII variables. The parameter ab_df_list is a list of data frames. This is what we created here. The parameter ab_survey_dates is a character vector of dates that will show up on the x-axis of the graph. This is what we created here. The parameter select_country is the name of the country you want to create the graph for. Now let’s fill it in. calculate_ind_trend_multiq( ab_var_list = questions_2_compare, # Variable to graph ab_df_list = df_list, # List of data frames ab_survey_dates = ab_survey_dates, # Vector of survey dates select_country = &quot;Algeria&quot; # Country to graph ) The output should look like the following, with the Survey column labeled. Survey Question Country Percent 1 Q2061A_1 Algeria 28 2 Q2061A_1 Algeria 37 3 Q2061A_1 Algeria 52 1 Q2061A_15 Algeria 52 2 Q2061A_15 Algeria 43 3 Q2061A_15 Algeria 25 We can see the resulting data frame has six rows; one for each question in each survey we are plotting. Let’s save the output as an object so we can plot that object in the next section. individual_multiq_trend_summary &lt;- calculate_ind_trend_multiq( questions_2_compare, df_list, ab_survey_dates, &quot;Algeria&quot; ) 14.3 Plot the Summary The next step is to plot the summary we just created. To do that, we use the function plot_ind_trend_multiq(). This function only requires one argument: ab_summary. Like many other graphs, we’ll want to add a bit later on. To see a complete list of parameters, including optional ones, use ?plot_ind_trend_multiq() in your R console. For now, let’s see what happens when we just supply our summary we saved as individual_multiq_trend_summary. plot_ind_trend_multiq( ab_summary = individual_multiq_trend_summary ) #&gt; Warning in title_function(.var = &quot;multiquestion graphs&quot;, .title = .title, : ✖ There is currently no title for `multiquestion graphs`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning in subtitle_function(.var = &quot;multiquestion graphs&quot;, .subtitle = .subtitle, : ✖ There is currently no subtitle for `multiquestion graphs`. #&gt; ℹ Please specify your own until this has been corrected. Nearly there! What still needs to be changed? …Quite a lot, actually. Glaringly, we need a title, subtitle, caption, and legend labels. To provide the title, subtitle, and caption, we’ll use the same parameters that are present in all plot_ functions: .title, .subtitle, and .caption. plot_ind_trend_multiq( ab_summary = individual_trend_summary, .title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot; ) This might be enough for internal AB use, but if we plan on sharing our graphs, it is prudent to add widely understandable labels to the legend. Luckily, we prepped for this earlier when we created the object question_labels. Now we just need to tell plot_ind_trend_multiq() to use these labels for the legend. We do that with the parameter legend_names. plot_ind_trend_multiq( ab_summary = individual_trend_summary, .title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;, legend_names = question_labels ) #&gt; Warning in plot_ind_trend_multiq(ab_summary = individual_trend_summary, : ✖ Incorrect number of labels for legend. #&gt; ℹ You have provided either too many or too few legend names. What you have provided will be #&gt; ignored. Ta-da! Putting this all together, we have our original code and graph. questions_2_compare &lt;- c(&quot;Q2061A_1&quot;, &quot;Q2061A_15&quot;) question_labels &lt;- c(&quot;Economic situtation&quot;, &quot;COVID-19&quot;) df_list &lt;- list(survey1, survey2, survey3) ab_survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) calculate_ind_trend_multiq(questions_2_compare, df_list, ab_survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend_multiq(.title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;, legend_names = question_labels) 14.4 Extras 14.4.1 Human Readable If you just want to look at the summaries and not necessarily create a plot, the output of calculate_ind_trend_multiq() might not be the easiest to understand from a glance. There is a parameter called human_readable that is designed to help with that. By default, human_readable is set to FALSE and each row is unique to the survey-question. If human_readable is set to TRUE, each is unique to a survey and there are columns for each question. calculate_ind_trend_multiq( ab_var_list = questions_2_compare, ab_df_list = df_list, ab_survey_dates = ab_survey_dates, select_country = &quot;Algeria&quot;, human_readable = FALSE # This is the default ) Default setting with human_readable = FALSE. Survey Question Country Percent 1 Q2061A_1 Algeria 28 2 Q2061A_1 Algeria 37 3 Q2061A_1 Algeria 52 1 Q2061A_15 Algeria 52 2 Q2061A_15 Algeria 43 3 Q2061A_15 Algeria 25 calculate_ind_trend_multiq( ab_var_list = questions_2_compare, ab_df_list = df_list, ab_survey_dates = ab_survey_dates, select_country = &quot;Algeria&quot;, human_readable = TRUE # This is NOT the default ) Default setting with human_readable = TRUE. Survey Country Q2061A_1 Q2061A_15 1 Algeria 28 52 2 Algeria 37 43 3 Algeria 52 25 The default is set to FALSE because that is the structure plot_ind_trend_multiq() expects. If you set human_readable to TRUE and use that output in plot_ind_trend_multiq(), you will get an error. 14.4.2 Legend Names Legend names can be included either in calculate_ind_trend_multiq() or plot_ind_trend_multiq(). The parameter in both functions is called legend_names. If you include legend_names in calculate_ind_trend_multiq(), you do not need to include legend_names in plot_ind_trend_multiq(). This chapter presents adding legend_names with the plotting function because the author thought readers would find that more intuitive. The code below shows that setting the parameter legend_names in either the calculate_ind_trend_multiq() or plot_ind_trend_multiq() produces the same result. calculate_ind_trend_multiq( questions_2_compare, df_list, ab_survey_dates, &quot;Algeria&quot; ) |&gt; plot_ind_trend_multiq( .title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot;, legend_names = question_labels # Adding labels during the plotting phase ) calculate_ind_trend_multiq( questions_2_compare, df_list, ab_survey_dates, &quot;Algeria&quot;, legend_names = question_labels # Adding labels during the calculate phase ) |&gt; plot_ind_trend_multiq( .title = &quot;What is the most important challenge facing Algeria today?&quot;, .subtitle = &quot;% saying&quot;, .caption = &quot;Arab Barometer Wave VI, Algeria&quot; ) 14.4.3 Font Size The font size default brand size is used for the graph text. You can learn how to change that in the chapter on changing the font size. 14.4.4 Colors You can learn how to change the colors for the single country trend graph in the chapter on changing graph colors. "],["color-options.html", "Chapter 15 Color Options 15.1 Available Colors 15.2 Available Palettes", " Chapter 15 Color Options 15.1 Available Colors The colors available for graphs come from the Arab Barometer Color Guide. You can see a list of colors with the command: ArabBarometer_clrs #&gt; AB blue AB orange AB magenta AB light blue AB purple AB pink #&gt; &quot;#0098BE&quot; &quot;#DF6E21&quot; &quot;#AC517F&quot; &quot;#7CBBC7&quot; &quot;#796391&quot; &quot;#CF83A3&quot; #&gt; AB yellow cool grey zeke james bond dark blue medium blue #&gt; &quot;#FBA950&quot; &quot;#B1C2CF&quot; &quot;#CCEAF2&quot; &quot;#00718E&quot; &quot;#003D4E&quot; &quot;#4B91B8&quot; #&gt; pale green olive green copper light bronze bright apple dark watermelon #&gt; &quot;#C8C6A2&quot; &quot;#AAA764&quot; &quot;#AC5410&quot; &quot;#DC9C56&quot; &quot;#FF5E64&quot; &quot;#E42525&quot; #&gt; mary clare plumb lilac bright purple coffee midnight ocean #&gt; &quot;#EAA4A4&quot; &quot;#7F375B&quot; &quot;#B4ADDF&quot; &quot;#5C1C95&quot; &quot;#6F3610&quot; &quot;#004B5E&quot; #&gt; salma almond meat army jacket apricot mohamed text grey #&gt; &quot;#C0E5EE&quot; &quot;#F6DAC7&quot; &quot;#706E3E&quot; &quot;#F7B58B&quot; &quot;#959595&quot; &quot;#545454&quot; #&gt; bright sky bright mauve dark apricot Algeria Egypt Iraq #&gt; &quot;#2CB2CE&quot; &quot;#AD517F&quot; &quot;#E28F57&quot; &quot;#DF6E21&quot; &quot;#00718E&quot; &quot;#FBA950&quot; #&gt; Jordan Kuwait Lebanon Libya Mauritania Morocco #&gt; &quot;#7F375B&quot; &quot;#706E3E&quot; &quot;#CF83A3&quot; &quot;#003D4E&quot; &quot;#DC9C56&quot; &quot;#7CBBC7&quot; #&gt; Palestine Saudi Arabia Sudan Tunisia Yemen MENA #&gt; &quot;#AC517F&quot; &quot;#1B909F&quot; &quot;#EAA4A4&quot; &quot;#AAA764&quot; &quot;#796391&quot; &quot;#E42525&quot; You’ll notice some colors are repeated with different names (particularly when it comes to countries). This makes some parts of graphing easier internally. The unique colors included in the package are shown below with their hex code. 15.2 Available Palettes The official branding colors have been combined into several color palettes to use with graphs. To see a list of all the (current) palettes, use the following command: AB_palette_options() #&gt; [1] &quot;blue pair&quot; &quot;orange pair&quot; &quot;purple pair&quot; &quot;AB Default&quot; #&gt; [5] &quot;blue triple&quot; &quot;orange triple&quot; &quot;purple triple&quot; &quot;green triple&quot; #&gt; [9] &quot;mono blue&quot; &quot;mono orange&quot; &quot;mono purple&quot; &quot;mono green&quot; #&gt; [13] &quot;dull rainbow&quot; &quot;cool orange&quot; &quot;blue-orange&quot; &quot;cool bright orange&quot; #&gt; [17] &quot;business man&quot; &quot;pretty cool&quot; &quot;soft rainbow&quot; &quot;warm&quot; #&gt; [21] &quot;purple pink&quot; &quot;stacked&quot; &quot;age&quot; &quot;income&quot; #&gt; [25] &quot;education&quot; &quot;gender&quot; &quot;settlement&quot; &quot;religion&quot; #&gt; [29] &quot;sect&quot; &quot;region&quot; &quot;trend colors&quot; "],["change-colors.html", "Chapter 16 Change Default Colors 16.1 Basic Cross Tabs 16.2 Demographic Cross Tabs 16.3 Stacked Graphs 16.4 Trend Graphs", " Chapter 16 Change Default Colors 16.1 Basic Cross Tabs The parameter is called .color_choice. This parameter accepts either a color name from ArabBarometR or a hex code. survey1 |&gt; calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) |&gt; plot_ind_smry(.color_choice = &quot;zeke&quot;) survey1 |&gt; calculate_comp_smry(&quot;Q1COVID19&quot;) |&gt; plot_comp_smry(.color_choice = &quot;#FF5E64&quot;) 16.2 Demographic Cross Tabs The parameter to change is called .color_choice. This parameter accepts any of the following: \"default\" (which it is set to), the name of an ArabBarometR color palette, a vector of ArabBarometR color names, or a vector of hex codes. If you choose to use a vector of either color names or hex codes, it must be the same length as the number of demographic categories. For example, the gender demographic has two categories, so a vector of custom colors needs to be length two. You can check the number of categories by looking at the data frame you are plotting. survey1 |&gt; calculate_ind_smry_dem(&quot;Q1COVID19&quot;, &quot;Algeria&quot;, demographic = &quot;gender&quot;) |&gt; plot_ind_smry_dem(.color_choice = &quot;blue pair&quot;) survey1 |&gt; calculate_comp_smry_dem(&quot;Q1COVID19&quot;, demographic = &quot;gender&quot;) |&gt; plot_comp_smry_dem(.color_choice = c(&quot;salma&quot;,&quot;mary clare&quot;)) data_frame_2_plot &lt;- survey1 |&gt; calculate_comp_smry_dem(&quot;Q1COVID19&quot;, demographic = &quot;Q101&quot;) 16.3 Stacked Graphs The parameter is called .color_choice. The parameter accepts any of the following: the name of an ArabBarometR color palette, a vector of ArabBarometR color names, or a vector of hex codes. If you choose to use a vector of either color names or hex codes, it must be the same length as the number of categories. Recall that the categories “don’t know” and “refuse” are combined into a single category unless otherwise specified. When determining the number of colors you need for your vector, only count the “don’t know” and “refuse” categories as one category. Take Q2061A as an example. In the first survey of wave six, question Q2061A had ten response options including “don’t know” and “refuse”. The calculate_comp_smry_stacked() function combines “don’t know” and “refuse” into one category, so the color palette vector only needs to be length nine. calculate_comp_smry_stacked(survey1, &quot;Q2061A&quot;) |&gt; plot_comp_smry_stacked(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;, .color_choice = &quot;soft rainbow&quot;) calculate_comp_smry_stacked(survey1, &quot;Q2061A&quot;) |&gt; plot_comp_smry_stacked(.caption = &quot;Arab Barometer Wave VI, Survey 1&quot;, .color_choice = c(&quot;AB blue&quot;, &quot;AB orange&quot;, &quot;AB magenta&quot;, &quot;AB light blue&quot;, &quot;AB purple&quot;, &quot;AB pink&quot;, &quot;AB yellow&quot;, &quot;zeke&quot;, &quot;pale green&quot;)) 16.4 Trend Graphs By default trend graphs are created in the brand color assigned to them. If you wish to change the color, you can do so by setting the parameter .color_choice to either a hex code or a color from ArabBarometer_colors(). Single Country Trend Graphs Changing the color for single country trend graphs is exactly the same as for basic cross tabs, only using a different parameter name. calculate_ind_trend(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend(.caption = &quot;Arab Barometer Wave VI, Algeria&quot;, .color_choice = &quot;bright apple&quot;) # Arab Barometer color name calculate_ind_trend(&quot;Q1COVID19&quot;, df_list, survey_dates, &quot;Algeria&quot;) |&gt; plot_ind_trend(.caption = &quot;Arab Barometer Wave VI, Algeria&quot;, .color_choice = &quot;#C8C6A2&quot;) # Arab Barometer color name Comparative Trend Graphs There is greater flexibility in colors for comparative trend graphs. The user may supply a named or unnamed vector of hex codes or Arab Barometer brand colors. df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Survey 2&quot;, &quot;Survey 3&quot;) # Unnamed color example calculate_comp_trend(&quot;Q1COVID19&quot;, df_list, ab_survey_dates, select_countries = c(&quot;Lebanon&quot;,&quot;Morocco&quot;)) |&gt; plot_comp_trend(.caption = &quot;Arab Barometer Wave VI&quot;, .color_choice = c(&quot;bright apple&quot;,&quot;james bond&quot;)) # Named color example trend_colors &lt;- c(&quot;bright apple&quot;,&quot;james bond&quot;) names(trend_colors) &lt;- c(&quot;Morocco&quot;,&quot;Lebanon&quot;) calculate_comp_trend(&quot;Q1COVID19&quot;, df_list, ab_survey_dates, select_countries = c(&quot;Lebanon&quot;,&quot;Morocco&quot;)) |&gt; plot_comp_trend(.caption = &quot;Arab Barometer Wave VI&quot;, .color_choice = trend_colors) The user can also change the color of some but not all countries. # Change one color example calculate_comp_trend(&quot;Q1COVID19&quot;, df_list, ab_survey_dates, select_countries = c(&quot;Lebanon&quot;,&quot;Morocco&quot;)) |&gt; plot_comp_trend(.caption = &quot;Arab Barometer Wave VI&quot;, .color_choice = c(&quot;Lebanon&quot; = &quot;#C8C6A2&quot;)) "],["highlight-certain-countries.html", "Chapter 17 Highlight Certain Countries 17.1 Single Country Highlight 17.2 Multiple Country Highlight 17.3 Change Highlight Color", " Chapter 17 Highlight Certain Countries 17.1 Single Country Highlight survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) %&gt;% plot_comp_smry(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;, .highlight = &quot;Algeria&quot;) That code will produce the following graph: 17.2 Multiple Country Highlight survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) %&gt;% plot_comp_smry(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;, .highlight = c(&quot;Algeria&quot;,&quot;Lebanon&quot;)) That code will produce the following graph: 17.3 Change Highlight Color survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;) %&gt;% plot_comp_smry(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;, .highlight = &quot;Algeria&quot;, .highlight_clr = &quot;salma&quot;) That code will produce the following graph: "],["change-font-size.html", "Chapter 18 Change the Font Size", " Chapter 18 Change the Font Size survey1 |&gt; calculate_ind_smry(&quot;Q1COVID19&quot;, select_country = &quot;Algeria&quot;) |&gt; plot_ind_smry(.caption = &quot;Arab Barometer Wave VI, Survey I, Algeria&quot;, theme.title_size = 28, # Changes title size theme.subtitle_size = 14, # Changes subtitle size theme.caption_size = 20, # Changes caption size theme.axis_x_text_size = 26, # Changes x-axis text size theme.axis_y_text_size = 16, # Changes y-axis text size theme.legend_text_size = 8) # Changes legend text size "],["change-the-titlesubtitlecaption.html", "Chapter 19 Change the Title/Subtitle/Caption", " Chapter 19 Change the Title/Subtitle/Caption survey1 %&gt;% calculate_ind_smry(&quot;Q1COVID19&quot;, &quot;Algeria&quot;) %&gt;% plot_ind_smry(.title = &quot;New title&quot;, .subtitle = &quot;New subtitle&quot;, .caption = &quot;New caption&quot;) "],["select-countries-chp.html", "Chapter 20 Show Only Certain Countries? 20.1 In Comparative Graphs 20.2 In Single Country Graphs", " Chapter 20 Show Only Certain Countries? To choose only certain countries to plot, use the parameter select_countries. If you are creating a plot with a calculate_ function, this parameter is in calculate_ function. If the plot only uses the plot_ function, this parameter is in the plot_ function. The parameters is called select_countries in both cases. 20.1 In Comparative Graphs 20.1.1 Plots that go with calculate_ functions survey1 %&gt;% calculate_comp_smry(&quot;Q1COVID19&quot;, select_countries = c(&quot;Morocco&quot;,&quot;Lebanon&quot;)) %&gt;% plot_comp_smry(.caption = &quot;Arab Barometer Wave VI, Survey I&quot;) 20.1.2 Plots with no calculate_ functions df_list &lt;- list( survey1, survey2, survey3 ) survey_dates &lt;- c(&quot;Survey 1&quot;, &quot;Suvey 2&quot;, &quot;Survey 3&quot;) plot_trend_comp(&quot;Q1COVID19&quot;, df_list, survey_dates, select_countries = c(&quot;Morocco&quot;, &quot;Lebanon&quot;)) 20.2 In Single Country Graphs Instead of subsetting the Arab Barometer data by country to create individual country data frames, most users tend to want to use the whole data frame but only show results for one country. Most of the chapters in this book offer instruction based on this premise. When creating a single country graph with data that contains more than one country, use the parameter select_countries. "],["order-change-stacked-graphs.html", "Chapter 21 Change the order of a stacked graph?", " Chapter 21 Change the order of a stacked graph? Changing the order of a stacked graph, like creating many graphs at once, is not done within ArabBarometR per se, but the process is relatively straightforward nonetheless. For this example, let’s create a comparative stacked bar chart for Q2ACOVID19. calculate_comp_smry_stacked(survey1, &quot;Q2ACOVID19&quot;) |&gt; plot_comp_smry_stacked(.caption = &quot;Original Order&quot;) The order of the bars is determined by the factor level. You can see factor level in the data frame produced by the function calculate_comp_smry_stacked. The numbers are the factor levels, the words in brackets are the factor labels. In this example, you can see the factor levels are 1-7 and 666. The factor labels are the question response options. calculate_comp_smry_stacked(survey1, &quot;Q2ACOVID19&quot;) #&gt; # A tibble: 22 × 3 #&gt; # Groups: Country [3] #&gt; Country Q2ACOVID19 Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 1 [Family member illness or death] 27 #&gt; 2 Algeria 2 [Loss of household income] 2 #&gt; 3 Algeria 3 [Negative impact on economy] 8 #&gt; 4 Algeria 4 [Healthcare system can&#39;t handle] 14 #&gt; 5 Algeria 5 [Inadequate gov.&#39;t response] 5 #&gt; 6 Algeria 6 [Citizens not following recommendations] 25 #&gt; 7 Algeria 7 [Other] 2 #&gt; 8 Lebanon 1 [Family member illness or death] 66 #&gt; 9 Lebanon 2 [Loss of household income] 2 #&gt; 10 Lebanon 3 [Negative impact on economy] 12 #&gt; # ℹ 12 more rows Instead of leading with “Illness or death of a family member”, say we want to lead with “Inadequate gov.t response”. We need to change the factor levels. First, we’ll save the output of calculate_comp_smry_stacked to an object we can manipulate. new_df &lt;- calculate_comp_smry_stacked(survey1, &quot;Q2ACOVID19&quot;) To change the factor levels, we’ll use the recode function from the dplyr library. There are several ways you can use the recode function to re-order the factor levels. This guide will review two, and you can explore the rest on your own. Move One Factor If the goal is to move “Inadequate gov.t response”, whose factor level is 5, in front of “Illness or death of a family member”, whose factor level is 1, we have to choose a new factor level that comes before 1. There are infinite numbers before 1, so we’ll just go with 0.5 here. new_df$Q2ACOVID19 &lt;- dplyr::recode( new_df$Q2ACOVID19, # The variable getting recoded `5` = .5, # The old value to new value .default = levels(new_df$Q2ACOVID19), # Use the original levels as a guide .combine_value_labels = T # Keep the original levels for all other variables ) We can see the new value of the factor. #&gt; # A tibble: 22 × 3 #&gt; # Groups: Country [3] #&gt; Country Q2ACOVID19 Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 1 [Family member illness or death] 27 #&gt; 2 Algeria 2 [Loss of household income] 2 #&gt; 3 Algeria 3 [Negative impact on economy] 8 #&gt; 4 Algeria 4 [Healthcare system can&#39;t handle] 14 #&gt; 5 Algeria 0.5 [Inadequate gov.&#39;t response] 5 #&gt; 6 Algeria 6 [Citizens not following recommendations] 25 #&gt; 7 Algeria 7 [Other] 2 #&gt; 8 Lebanon 1 [Family member illness or death] 66 #&gt; 9 Lebanon 2 [Loss of household income] 2 #&gt; 10 Lebanon 3 [Negative impact on economy] 12 #&gt; # ℹ 12 more rows And now when we plot the recoded data frame. new_df |&gt; plot_comp_smry_stacked(.caption = &quot;New Order, Option 1&quot;) Swap Factors An alternative way to move “Inadequate gov.t response” to the front is to swap positions with “Illness or death of a family member”. That is, make “Inadequate gov.t response” factor level 1 and “Illness or death of a family member” factor level 5. Again, we use recode from dplyr. new_df$Q2ACOVID19 &lt;- dplyr::recode( new_df$Q2ACOVID19, # The variable getting recoded `5` = 1, # The old value to new value `1` = 5, # The old value to new value .default = levels(new_df$Q2ACOVID19), # Use the original levels as a guide .combine_value_labels = T # Keep the original levels for all other variables ) The new factor levels are: #&gt; # A tibble: 22 × 3 #&gt; # Groups: Country [3] #&gt; Country Q2ACOVID19 Percent #&gt; &lt;chr&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; #&gt; 1 Algeria 5 [Family member illness or death] 27 #&gt; 2 Algeria 2 [Loss of household income] 2 #&gt; 3 Algeria 3 [Negative impact on economy] 8 #&gt; 4 Algeria 4 [Healthcare system can&#39;t handle] 14 #&gt; 5 Algeria 1 [Inadequate gov.&#39;t response] 5 #&gt; 6 Algeria 6 [Citizens not following recommendations] 25 #&gt; 7 Algeria 7 [Other] 2 #&gt; 8 Lebanon 5 [Family member illness or death] 66 #&gt; 9 Lebanon 2 [Loss of household income] 2 #&gt; 10 Lebanon 3 [Negative impact on economy] 12 #&gt; # ℹ 12 more rows Finally, we plot the new data frame. new_df |&gt; plot_comp_smry_stacked(.caption = &quot;New Order, Option 2&quot;) The main take away here is that if you want to play around with the order of a stacked bar graph, it is best to familiarize yourself with recode(). "],["standard-warnings.html", "Chapter 22 Understand (some) Messages, Warnings, and Errors 22.1 Messages 22.2 Warnings", " Chapter 22 Understand (some) Messages, Warnings, and Errors There are cases where even if your code is correct, you may see a message or warning in your R console. This chapter covers common instances and notes when you should except a message or warning. 22.1 Messages Messages are text output in your R console that are meant to be informative. They do not indicate anything is wrong. 22.1.1 Joining Any function that internally uses a join function from the dplyr function produces a message in your R console telling you which variables are being used to join data frames. The calculate_ind_smry_dem() function produces this message. We can see it as a result of our example in Chapter 3. Inside calculate_ind_smry_dem(), two data frames are being joined by the variable Q1COVID19. That is all the message is saying. Nothing is wrong with the code. 22.2 Warnings A warning is very different from an error. A warning says your code ran, but you might want to double check something. If you know the code you run will produce a warning, you can safely ignore it. Warnings do not necessarily mean something is wrong with your code. 22.2.1 position_dodge() A common warning you will when creating a bar graph that uses two or more colors is the following: #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. TL;DR: ignore this. In short, this warning comes from the ggplot2 package and is referring to how the bars are ordered. The internal code of any plot_ function in ArabBarometR prevents overlapping x intervals, so there is no need to worry about this. 22.2.2 No Default Title/Subtitle By default, the plot_ functions will do their best to provide a default title and subtitle. However, if there is no default title or subtitle, the plot_ functions will use \"TITLE\" or \"SUBTITLE\" instead. In this case, you will also receive a warning telling you that there is no title and/or subtitle for your graph. You can still create the graph, but you should add your own title and/or subtitle before you share that graph with the public. There are a few specific instances where you will see this warning. Variable is Missing a Title/Subtitle If the variable you are trying to plot is missing from titles data frames, you will see this error. For example, say Arab Barometer adds a question to a new survey under the variable QXX but the titles have not yet been updated. You can still create a graph, but you will receive the following warnings: #&gt; Warning in title_function(&quot;QXX&quot;): ✖ There is currently no title for `QXX`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning in subtitle_function(&quot;QXX&quot;): ✖ There is currently no subtitle for `QXX`. #&gt; ℹ Please specify your own until this has been corrected. To make these warnings go away, you will have to supply your own title and subtitle until the package is updated. Multiquestion Graphs When you are creating a graph that displays more than one question, there is no default title or subtitle. You must always supply your own. If you do not supply your own title and subtitle, you will see the following warnings: #&gt; Warning in title_function(.var = &quot;multiquestion graphs&quot;, .title = .title, : ✖ There is currently no title for `multiquestion graphs`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning in subtitle_function(.var = &quot;multiquestion graphs&quot;, .subtitle = .subtitle, : ✖ There is currently no subtitle for `multiquestion graphs`. #&gt; ℹ Please specify your own until this has been corrected. #&gt; Warning: `position_dodge()` requires non-overlapping x intervals. We see the position_dodge() warning, the title warning, and the subtitle warning. The title and subtitle warnings will disappear once you provide a title and subtitle. "],["guide-features.html", "Guide Features", " Guide Features This guide is made with bookdown, an R package that allows for the combination of Rmarkdown files into a book. Bookdown books have some very nifty features. To start, all the chunks of code you see in this book can be copy and pasted right into your R. If you hover your mouse over the code chunk7 below, you will see a little copy icon in the upper-right hand corner. Clicking on that icon will copy the code to your clipboard, and you will be able to paste it directly into your R console. # Example Code Chunk ## Try copying-and-pasting this 2 + 2 Could you have typed that on your own? Yes. BUT. Now you see how copying and pasting from this guide works. Note: Remember that you must be internally consistent in your own R console. You can copy and paste the following chunk of code into your own R console, but you will receive an error if you do not have the package installed. praise::praise() See if you can install the praise package on your own computer, then try copying and pasting the code. Some other great features can be found across the top of the Guide. In figure 22.1, you’ll see that I’ve highlighted them in different colors. Figure 22.1: Bookdown Options This icon allows you to expand or collapse the table of contents on the left-hand side. This icon allows you to search through the book. For example, if you wanted to see where I talk about stacked plots, you can click on the magnifying glass icon and type “stacked” into the search bar. The table of contents will narrow to the sections where “stacked” is mentioned. When you click on the section, “stacked” will be highlighted on the page. This icon allows you to vary the display of the book. You can change the font size, select serif or sans-serif font, and the background/text color. This icon allows you to edit the book. Yes. You, dear reader, can edit this book. I will need to accept the changes before they are permanent, but still. Please don’t. Unles you seee a typeo. This icon allows you to see the source material for the book. It takes you to the github page the .Rmd file is hosted on. This little i tells you a few basic keyboard shortcuts. These icons allow you to share the book one social media or through a link. Since this package is proprietary, I would advise you to keep the book to yourself unless you are sharing it with someone else on the team. “Code chunk” is actually, in fact, the technical term.↩︎ "],["installing-and-updating-arabbarometr.html", "Installing and Updating ArabBarometR Installing ArabBaromtR Updating ArabBarometR", " Installing and Updating ArabBarometR Installing ArabBaromtR If you do not have the ArabBarometR package, you can install it on your machine in one of two ways. It is highly recommend you follow the first method. Installing from GitHub This is the recommended way to install ArabBarometR. You will need a GitHub Personal Access Token (PAT). You will only need to do this step once. GitHub has updated their security measures. Your PAT will generally take the place of your password. To create one, click here. Click the button that says Generate new token. Select the permissions you want to token to be accountable for. Once you’ve made your selections, click Generate token. Once you have your PAT, save it somewhere (1) secure and (2) easily accessible (to you). You cannot recover your PAT if you lose it. You can make a new one, but then you have to reset everything and it’s a big pain. You can save yor PAT (and other sensitive information) in R using the keyring package if you are so inclined. Here is a link to a tutorial. This bookdown section does a great job of explaining PATs in minimal and expansive detail. The book overall is an excellent source for information on Git and R. Make you have devtools installed in R. If not, use install.packages(\"devtools\"). Now, you can install ArabBarometR directly from GitHub! Use the following command: devtools::install_github(\"Arab-Barometer/ArabBarometR\", ref = \"main\", auth_token = \"your_PAT\", dependencies = T) In this case, \"your_PAT\" is the PAT you created in step 1. The last parameter specification, dependencies = T , installs all the packages that are required to run ArabBarometR. Tip: you can also use this parameter whenever you install any R package the “normal” way with install.packages(). ArabBarometR is now installed everywhere on your computer. Using library(ArabBarometR) will call the latest version of the package. Downloading from GitHub To download the latest version of this package, click the green code button towards the top of the ArabBarometR repo page. From the list of options, select Download ZIP. Save the zip file somewhere you will not loose it. If you are downloading this not for the first time, I suggest saving it on top of where you saved the old file. That way you will only have one version of the package on your computer and will not become confused as to which package to use. Unzip the file. Open ArabBarometR.Rproj. In the top right pane, click on the tab that says Build. In the Build tab, click on Install and Restart. Install any packages that are required. The latest ArabBarometR is now on your computer. The next time you open R, type install.packages(\"ArabBarometR\") into the console. ArabBarometR is now installed everywhere on your computer. Using library(ArabBarometR) will call the latest version of the package. Updating ArabBarometR To check which version you have, you can use utils::packageVersion(\"ArabBarometR\"). Updating via install_github This is the recommended way to update your version of ArabBarometR when minor revisions and patches occur. It is only accessible if you followed have a PAT from GitHub. You can update ArabBarometR directly from GitHub! Use the following command: devtools::install_github(\"Arab-Barometer/ArabBarometR\", ref = \"main\", auth_token = \"your_PAT\", dependencies = T, upgrade = \"always\") In this case, \"your_PAT\" is the PAT you created in step 1. The last parameter specification, dependencies = T , installs all the packages that are required to run ArabBarometR. That’s it! Your package is updated. Updating via downloads To update the package via downloading it, follow the exact same steps as installing it. To download the latest version of this package, click the green code button towards the top of the ArabBarometR repo page. From the list of options, select Download ZIP. Save the zip file somewhere you will not loose it. If you are downloading this not for the first time, I suggest saving it on top of where you saved the old file. That way you will only have one version of the package on your computer and will not become confused as to which package to use. Unzip the file. Open ArabBarometR.Rproj. In the top right pane, click on the tab that says Build. In the Build tab, click on Install and Restart. Install any packages that are required. The latest ArabBarometR is now on your computer. The next time you open R, type install.packages(\"ArabBarometR\") into the console. ArabBarometR is now installed everywhere on your computer. Using library(ArabBarometR) will call the latest version of the package. "],["piping-note.html", "A Note On Piping Piping puts the object on the left into the function on the right. Piping operators can chain code together. The order matters.", " A Note On Piping As mentioned, throughout this guide the examples will be using the piping operator, which you will see as either |&gt; (native R) or %&gt;% (dplyr package). If you are unfamiliar with it, a little more detail may be helpful. What is the difference between the native R pipe and the dplyr pipe? Not much.. For the purposes of using ArabBarometR, they are essentially identical. This guide will use them interchangeably. TL;DR: The piping operator does puts something (whatever is on the left) into a function (on the right) as the first input. Piping puts the object on the left into the function on the right. First, at the most basic level, the piping operator points to where the input should go. Here’s a small example, checking if the number 2 is a character. # Using base R traditionally is.character(2) ## We are asking R is 2 is a character #&gt; [1] FALSE is.character(&quot;2&quot;) ## We are asking R is &quot;2&quot; is a character #&gt; [1] TRUE # Using the piping operator |&gt; 2 |&gt; is.character() ## The piping operator is taking our input, 2, and pointing out the function it belongs in, is.character() #&gt; [1] FALSE &quot;2&quot; |&gt; is.character() ## The piping operator is taking our input, &quot;2&quot;, and pointing out the function it belongs in, is.character() #&gt; [1] TRUE # Using the piping operator %&gt;% 2 %&gt;% is.character() ## The piping operator is taking our input, 2, and pointing out the function it belongs in, is.character() #&gt; [1] FALSE &quot;2&quot; %&gt;% is.character() ## The piping operator is taking our input, &quot;2&quot;, and pointing out the function it belongs in, is.character() #&gt; [1] TRUE The code using base R and the code using the piping operator are equivalent. The piping operator is telling R that 2 or “2” go inside the function it is pointing to. “OK,” you think. “The first one is way easier to understand. Why would I ever use the second one?” Often that’s the correct thought process. Computers are tricky enough on their own without us complicating the way we type things in. It’s the next element of a piping operator that makes it convenient more often than not. Piping operators can chain code together. Instead of saving object after object, you can use a piping operator to get straight to the point. Say you want to change that 2 into a character and make sure that it changed. In base R, this is done in two steps. First, use the as.character() function with 2 as the input and save the output as something. Second, use the output from the first step as the input for the function is.character(). # Base R: ## Step 1: chr &lt;- as.character(2) ## Step 2: is.character(chr) #&gt; [1] TRUE Using the piping function, you can combine these two steps. # Using piping operator: ## Chain Ex. 1a 2 |&gt; as.character() %&gt;% is.character() #&gt; [1] TRUE ## Chain Ex. 1b 2 %&gt;% as.character() %&gt;% is.character() #&gt; [1] TRUE Here, the piping operator tells R to put 2 into the as.character() function and then put the output of that into the is.character() function. Writing out all the operations in a single line can be visually confusing. Luckily, R can (usually) tell when you are or are not finished with an operation. It is convention to start a new line after using the piping operator. Visually, this makes the code much more clear. # Following stylistic convention: ## Chain Ex. 2a 2 |&gt; as.character() |&gt; is.character() #&gt; [1] TRUE ## Chain Ex. 2b 2 %&gt;% as.character() %&gt;% is.character() #&gt; [1] TRUE So far the functions we have piped input into are empty. This is because these functions only take one input. If a function takes more than one input, you can still use the piping operator. But make note, you can only pipe in one argument at a time. Let’s look at an example using a simple addition function. The function will take two inputs. When we use it, we will pipe one in. # Define an addition function: add_this &lt;- function(x,y){ x + y } # Pipe in x: ## a) 2 |&gt; add_this(3) #&gt; [1] 5 ## b) 2 %&gt;% add_this(3) #&gt; [1] 5 Remember chaining? This is a good function to give another example of that. # Add more things: ## Chain Ex. 3a 2 |&gt; add_this(3) |&gt; add_this(7) #&gt; [1] 12 ## Chain Ex. 3b 2 %&gt;% add_this(3) %&gt;% add_this(7) #&gt; [1] 12 First, R adds 2 to 3. Second, R adds 7 to 5. In traditional order of operations notation, the problem would look like: (2 + 3) + 7. The piping operator takes everything that has already been calculated on its left and uses that as the first input on its right. To put this as explicitly as possible while using work-appropriate language: The 2 on the left of the first |&gt;/%&gt;% is used as the x input for add_this() and 3 is the y input. The outcome of 2 as the x input and 3 as the y input in add_this() is used as the x input for the next add_this() and 7 is the y input. That means we could also write the following to get the same answer: # No piping operator: ## Chain Ex. 4: add_this(add_this(2,3),7) #&gt; [1] 12 Even though Chain Ex. 4 is fewer lines than Chain Ex. 3, visually it is much more confusing. The most important take away from this section, however, is that Chain Ex. 3 and Chain Ex. 4 are exactly the same. The piping operator transforms Chain Ex. 4 into Chain Ex. 3. The order matters. The object you are piping is the first variable in the function. In the add_this() function, the 2 we piped in was x and the 3 used in the function was y. Another example with a subtraction function will emphasize this. # Define a subtraction function: sub_this &lt;- function(x,y){ x - y } # a) ## Pipe in x: 2 |&gt; sub_this(3) #&gt; [1] -1 ## Change the order: 3 |&gt; sub_this(2) #&gt; [1] 1 # b) ## Pipe in x: 2 %&gt;% sub_this(3) #&gt; [1] -1 ## Change the order: 3 %&gt;% sub_this(2) #&gt; [1] 1 The piping operator is most frequently used with functions where the first input is a data frame, and the function then does something to the variables in that data frame. That is certainly the case in 99% of the examples in this guide. In words, code is saying “I want you to use information from this data frame to complete this function.” These are simple examples, but the concepts are important. No matter what is going on with the functions, or how long the chain is, at the end of the day all the piping operator does is put something in a function as the first input. The end. "],["using-map.html", "Using a map() Functions with One Argument Functions with Multiple Arguments Conclusion", " Using a map() Quite often in coding, you want to do the same thing only slightly differently many times. For example, make a graph for every variable in a data set. The package purrr is full of functions designed to help you do just that. In particular, the map() function is extremely handy. It is used in all examples related to making multiple graphs. The map function takes two inputs: (1) a list of things to pass to a function, and (2) a function. Essentially, map() takes each item in the list, and passes it to the function very efficiently. Functions with One Argument Let’s start with the basics. Say we have a list of letters we want to capitalize, \"a\",\"b\",\"c\",\"d\". The function toupper() takes a string and capitalizes each letter in that string. Before learning about mapping, you might pass one string in at a time, like in the following code. toupper(&quot;a&quot;) #&gt; [1] &quot;A&quot; toupper(&quot;b&quot;) #&gt; [1] &quot;B&quot; toupper(&quot;c&quot;) #&gt; [1] &quot;C&quot; toupper(&quot;d&quot;) #&gt; [1] &quot;D&quot; This is tedious and inefficient. Instead, with the map function, we can save our letters in a list and pass that list and the toupper() function to the map() function. Let’s call our list of letters L and do just that. L &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;) # List of letters map( L, # List object toupper # Function ) #&gt; [[1]] #&gt; [1] &quot;A&quot; #&gt; #&gt; [[2]] #&gt; [1] &quot;B&quot; #&gt; #&gt; [[3]] #&gt; [1] &quot;C&quot; #&gt; #&gt; [[4]] #&gt; [1] &quot;D&quot; Not only does this take fewer lines of code (which generally makes your code more legible), but at a large scale the map() function preforms much faster than running each line individually or even using a for loop. Functions with Multiple Arguments The basic example gives the basic idea of how map() works. In the context of using map() in combination with functions from the ArabBarometR package, however, you’ll rarely have a function that takes only one argument. For example, calculate_ind_smry() requires at least two arguments: the data frame and the variable to calculate a summary for. If you are using the comparative data, you’ll want to specify the country you’re interested in as well. Let’s say we want to calculate summaries for every ordinal question in our data set for Algeria. So how does map() know you want to feed calculate_ind_smry() a long list of questions while using the same data and country? It doesn’t. The user must tell map() which arguments to hold constant. If you look at the help page for calculate_ind_smry()8, under the section Usage you will see the following: calculate_ind_smry( ab_data, ab_var, select_country = T, .weights = &quot;WT&quot;, .language = &quot;auto&quot;, .dkr = c(98, 99) ) This is a list of all the arguments calculate_ind_smry() takes: .ab, .var, .country, .weights, .language, and .dkr. The map() function will try pass the items from the list as the first argument in the supplied function unless you tell it otherwise. In this case, the first argument is .ab, which should be the data frame. The following code will give you an error. # Pre-work to get ordinal questions: ordinal_questions &lt;- individual_titles$qname[individual_titles$qname %in% names(survey1) &amp; individual_titles$type == &quot;ordinal&quot;] ordinal_questions &lt;- ordinal_questions[!ordinal_questions %in% c(&quot;Q201A_6A_LIB&quot;, &quot;Q201A_6B_LIB&quot;)] # Using the mapping function: map( ordinal_questions, # List object calculate_ind_smry # Function ) #&gt; Error in `map()`: #&gt; ℹ In index: 1. #&gt; Caused by error in `.f()`: #&gt; ! argument &quot;ab_var&quot; is missing, with no default The error says it occurs at index 1, the error was caused by .f(), and that “argument \".var\" is missing, with no default.” …What? The first three lines of this error tell you when, where, and why the error occurred. Index 1 tells us that that the very first item in ordinal_questions caused the error. You can see which variable that is with simple indexing as follows. ordinal_questions[1] #&gt; [1] &quot;Q101&quot; Index 1 is telling us that the very first time a variable was passed to calculate_ind_smry(), an error occurred. Next, we know the error was caused by .f(). What’s .f()? That is the second argument map() takes: the function. You can verify this by looking at the help page of map(). In our case, .f() is calculate_ind_smry(). Now we know that the first time a variable was passed to calculate_ind_smry(), the function calculate_ind_smry() has an error. Why? The error says calculate_ind_smry() needs a value for the argument .var, but none was provided. Huh? We just passed a whole bunch of variables to calculate_ind_smry(), right? Wrong. Well. Kind of wrong. We did pass a whole bunch of variables to calculate_ind_smry(), but the map() function thought we were passing a whole bunch of data frames. Since .ab is the first variable, map() tried to pass each item in ordinal_questions to calculate_ind_smry() as .ab while holding every other argument in calculate_ind_smry() constant. To map(), the function looks like calculate_ind_smry(oridinal_questions, .var, T, \"WT\", \"auto\", c(98,99)). There are two problems with this. Each item in ordinal_questions is not a data frame. There is no default for .var, so there is nothing to hold constant. Since .var has no default, R could not even attempt calculate_ind_smry(). That is why it is yelling at us saying there are no variables. So how do we tell map() that ordinal_questions is a list of variables and that it needs to use survey1 to give us summaries for Algeria? We need to tell map() that the argument .ab should always be survey1 and the argument .country should always be \"Algeria\". map( ordinal_questions, # List object calculate_ind_smry, # Function ab_data = survey1, # Constant argument 1 select_country = &quot;Algeria&quot; # Constant argument 2 ) To map(), the function calculate_ind_smry() looks like calculate_ind_smry(survey1, ordinal_questions, \"Algeria\", \"WT\", \"auto\", c(98,99)). Much better. As an exercise to the reader, how would we calculate these summaries if we wanted to include the value 100 in our “don’t know/refuse” category? The output of map() is list. Lists can be cumbersome. It is best to save this list as an object. You do that using the &lt;- or =. ordinal_summaries_list &lt;- map( ordinal_questions, calculate_ind_smry, ab_data = survey1, select_country = &quot;Algeria&quot; ) Now, you could reference an entry of ordinal_summaries_list one at a time, or feed it into another map(). For example, maybe you wanted to make a graph for each of these summaries. Conclusion This concludes the brief “how-to” on map() from the purrr package. The purrr package contains many powerful variations on map(). To learn more about those variations, here are some more in-depth resources. A video by Hadley Wickham introducing purrr Rebecca Barter’s tutorial purrr (this is very good and accessible) The main webpage for the purrr package (a bit technical) The purrr package cheat sheet (helpful once you know what you’re doing) Type ?ArabBarometR::calculate_ind_smry() into your R console then hit enter.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
